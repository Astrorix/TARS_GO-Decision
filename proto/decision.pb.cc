// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: decision.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "decision.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace roborts_decision {

namespace {

const ::google::protobuf::Descriptor* Point_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Point_reflection_ = NULL;
const ::google::protobuf::Descriptor* EscapeConstraint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EscapeConstraint_reflection_ = NULL;
const ::google::protobuf::Descriptor* SearchConstraint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SearchConstraint_reflection_ = NULL;
const ::google::protobuf::Descriptor* WhirlVel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WhirlVel_reflection_ = NULL;
const ::google::protobuf::Descriptor* Referee_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Referee_reflection_ = NULL;
const ::google::protobuf::Descriptor* TopicName_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TopicName_reflection_ = NULL;
const ::google::protobuf::Descriptor* DecisionConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DecisionConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* RobotInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RobotInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PunishInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PunishInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Status_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Status_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Status_RunStatus_descriptor_ = NULL;
const ::google::protobuf::Descriptor* MutualInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MutualInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_decision_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_decision_2eproto() {
  protobuf_AddDesc_decision_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "decision.proto");
  GOOGLE_CHECK(file != NULL);
  Point_descriptor_ = file->message_type(0);
  static const int Point_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, roll_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, pitch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, yaw_),
  };
  Point_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Point_descriptor_,
      Point::default_instance_,
      Point_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, _has_bits_[0]),
      -1,
      -1,
      sizeof(Point),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, _internal_metadata_),
      -1);
  EscapeConstraint_descriptor_ = file->message_type(1);
  static const int EscapeConstraint_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EscapeConstraint, left_x_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EscapeConstraint, right_x_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EscapeConstraint, robot_x_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EscapeConstraint, left_random_min_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EscapeConstraint, left_random_max_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EscapeConstraint, right_random_min_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EscapeConstraint, right_random_max_x_),
  };
  EscapeConstraint_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      EscapeConstraint_descriptor_,
      EscapeConstraint::default_instance_,
      EscapeConstraint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EscapeConstraint, _has_bits_[0]),
      -1,
      -1,
      sizeof(EscapeConstraint),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EscapeConstraint, _internal_metadata_),
      -1);
  SearchConstraint_descriptor_ = file->message_type(2);
  static const int SearchConstraint_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchConstraint, x_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchConstraint, y_limit_),
  };
  SearchConstraint_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SearchConstraint_descriptor_,
      SearchConstraint::default_instance_,
      SearchConstraint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchConstraint, _has_bits_[0]),
      -1,
      -1,
      sizeof(SearchConstraint),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchConstraint, _internal_metadata_),
      -1);
  WhirlVel_descriptor_ = file->message_type(3);
  static const int WhirlVel_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WhirlVel, angle_x_vel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WhirlVel, angle_y_vel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WhirlVel, angle_z_vel_),
  };
  WhirlVel_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      WhirlVel_descriptor_,
      WhirlVel::default_instance_,
      WhirlVel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WhirlVel, _has_bits_[0]),
      -1,
      -1,
      sizeof(WhirlVel),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WhirlVel, _internal_metadata_),
      -1);
  Referee_descriptor_ = file->message_type(4);
  static const int Referee_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Referee, game_result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Referee, game_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Referee, game_survivor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Referee, robort_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Referee, robort_heat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Referee, robort_bonus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Referee, robort_damage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Referee, robort_shoot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Referee, bonus_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Referee, local_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Referee, remote_name_),
  };
  Referee_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Referee_descriptor_,
      Referee::default_instance_,
      Referee_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Referee, _has_bits_[0]),
      -1,
      -1,
      sizeof(Referee),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Referee, _internal_metadata_),
      -1);
  TopicName_descriptor_ = file->message_type(5);
  static const int TopicName_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicName, topic_),
  };
  TopicName_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TopicName_descriptor_,
      TopicName::default_instance_,
      TopicName_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicName, _has_bits_[0]),
      -1,
      -1,
      sizeof(TopicName),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicName, _internal_metadata_),
      -1);
  DecisionConfig_descriptor_ = file->message_type(6);
  static const int DecisionConfig_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecisionConfig, point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecisionConfig, simulate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecisionConfig, master_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecisionConfig, escape_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecisionConfig, buff_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecisionConfig, search_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecisionConfig, e_search_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecisionConfig, c_search_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecisionConfig, whirl_vel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecisionConfig, auxe_bot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecisionConfig, master_bot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecisionConfig, wing_bot_task_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecisionConfig, wait_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecisionConfig, square_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecisionConfig, square_y_),
  };
  DecisionConfig_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DecisionConfig_descriptor_,
      DecisionConfig::default_instance_,
      DecisionConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecisionConfig, _has_bits_[0]),
      -1,
      -1,
      sizeof(DecisionConfig),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecisionConfig, _internal_metadata_),
      -1);
  RobotInfo_descriptor_ = file->message_type(7);
  static const int RobotInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotInfo, hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotInfo, heat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotInfo, bullets_),
  };
  RobotInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RobotInfo_descriptor_,
      RobotInfo::default_instance_,
      RobotInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(RobotInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotInfo, _internal_metadata_),
      -1);
  PunishInfo_descriptor_ = file->message_type(8);
  static const int PunishInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PunishInfo, on_gimbal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PunishInfo, on_chassis_),
  };
  PunishInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PunishInfo_descriptor_,
      PunishInfo::default_instance_,
      PunishInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PunishInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(PunishInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PunishInfo, _internal_metadata_),
      -1);
  Status_descriptor_ = file->message_type(9);
  static const int Status_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, is_running_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, position_),
  };
  Status_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Status_descriptor_,
      Status::default_instance_,
      Status_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, _has_bits_[0]),
      -1,
      -1,
      sizeof(Status),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, _internal_metadata_),
      -1);
  Status_RunStatus_descriptor_ = Status_descriptor_->enum_type(0);
  MutualInfo_descriptor_ = file->message_type(10);
  static const int MutualInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MutualInfo, robort_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MutualInfo, punish_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MutualInfo, status_),
  };
  MutualInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MutualInfo_descriptor_,
      MutualInfo::default_instance_,
      MutualInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MutualInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(MutualInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MutualInfo, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_decision_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Point_descriptor_, &Point::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      EscapeConstraint_descriptor_, &EscapeConstraint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SearchConstraint_descriptor_, &SearchConstraint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      WhirlVel_descriptor_, &WhirlVel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Referee_descriptor_, &Referee::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TopicName_descriptor_, &TopicName::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DecisionConfig_descriptor_, &DecisionConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RobotInfo_descriptor_, &RobotInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PunishInfo_descriptor_, &PunishInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Status_descriptor_, &Status::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MutualInfo_descriptor_, &MutualInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_decision_2eproto() {
  delete Point::default_instance_;
  delete Point_reflection_;
  delete EscapeConstraint::default_instance_;
  delete EscapeConstraint_reflection_;
  delete SearchConstraint::default_instance_;
  delete SearchConstraint_reflection_;
  delete WhirlVel::default_instance_;
  delete WhirlVel_reflection_;
  delete Referee::default_instance_;
  delete Referee_reflection_;
  delete TopicName::default_instance_;
  delete TopicName_reflection_;
  delete DecisionConfig::default_instance_;
  delete DecisionConfig_reflection_;
  delete RobotInfo::default_instance_;
  delete RobotInfo_reflection_;
  delete PunishInfo::default_instance_;
  delete PunishInfo_reflection_;
  delete Status::default_instance_;
  delete Status_reflection_;
  delete MutualInfo::default_instance_;
  delete MutualInfo_reflection_;
}

void protobuf_AddDesc_decision_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_decision_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016decision.proto\022\020roborts_decision\"R\n\005Po"
    "int\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\t\n\001z\030\003 \001(\002\022\014\n\004"
    "roll\030\004 \001(\002\022\r\n\005pitch\030\005 \001(\002\022\013\n\003yaw\030\006 \001(\002\"\304"
    "\001\n\020EscapeConstraint\022\024\n\014left_x_limit\030\001 \001("
    "\002\022\025\n\rright_x_limit\030\002 \001(\002\022\025\n\rrobot_x_limi"
    "t\030\003 \001(\002\022\031\n\021left_random_min_x\030\004 \001(\002\022\031\n\021le"
    "ft_random_max_x\030\005 \001(\002\022\032\n\022right_random_mi"
    "n_x\030\006 \001(\002\022\032\n\022right_random_max_x\030\007 \001(\002\"4\n"
    "\020SearchConstraint\022\017\n\007x_limit\030\001 \001(\002\022\017\n\007y_"
    "limit\030\002 \001(\002\"I\n\010WhirlVel\022\023\n\013angle_x_vel\030\001"
    " \001(\002\022\023\n\013angle_y_vel\030\002 \001(\002\022\023\n\013angle_z_vel"
    "\030\003 \001(\002\"\370\001\n\007Referee\022\023\n\013game_result\030\002 \001(\t\022"
    "\023\n\013game_status\030\001 \001(\t\022\025\n\rgame_survivor\030\003 "
    "\001(\t\022\025\n\rrobort_status\030\004 \001(\t\022\023\n\013robort_hea"
    "t\030\005 \001(\t\022\024\n\014robort_bonus\030\006 \001(\t\022\025\n\rrobort_"
    "damage\030\007 \001(\t\022\024\n\014robort_shoot\030\010 \001(\t\022\024\n\014bo"
    "nus_status\030\t \001(\t\022\022\n\nlocal_name\030\n \001(\t\022\023\n\013"
    "remote_name\030\013 \001(\t\"\032\n\tTopicName\022\r\n\005topic\030"
    "\001 \003(\t\"\332\004\n\016DecisionConfig\022&\n\005point\030\001 \003(\0132"
    "\027.roborts_decision.Point\022\027\n\010simulate\030\002 \001"
    "(\010:\005false\022\025\n\006master\030\003 \001(\010:\005false\022\'\n\006esca"
    "pe\030\004 \003(\0132\027.roborts_decision.Point\022+\n\nbuf"
    "f_point\030\005 \003(\0132\027.roborts_decision.Point\022,"
    "\n\013search_path\030\006 \003(\0132\027.roborts_decision.P"
    "oint\022.\n\re_search_path\030\007 \003(\0132\027.roborts_de"
    "cision.Point\022.\n\rc_search_path\030\010 \003(\0132\027.ro"
    "borts_decision.Point\022-\n\twhirl_vel\030\t \001(\0132"
    "\032.roborts_decision.WhirlVel\022)\n\010auxe_bot\030"
    "\n \003(\0132\027.roborts_decision.Point\022+\n\nmaster"
    "_bot\030\013 \003(\0132\027.roborts_decision.Point\0224\n\023w"
    "ing_bot_task_point\030\014 \001(\0132\027.roborts_decis"
    "ion.Point\022+\n\nwait_point\030\r \003(\0132\027.roborts_"
    "decision.Point\022\020\n\010square_x\030\016 \003(\002\022\020\n\010squa"
    "re_y\030\017 \003(\002\"6\n\tRobotInfo\022\n\n\002hp\030\001 \001(\005\022\014\n\004h"
    "eat\030\002 \001(\005\022\017\n\007bullets\030\003 \001(\005\"3\n\nPunishInfo"
    "\022\021\n\ton_gimbal\030\001 \001(\010\022\022\n\non_chassis\030\002 \001(\010\""
    "\264\001\n\006Status\022\022\n\nis_running\030\001 \002(\010\0222\n\006status"
    "\030\002 \001(\0162\".roborts_decision.Status.RunStat"
    "us\022)\n\010position\030\003 \001(\0132\027.roborts_decision."
    "Point\"7\n\tRunStatus\022\t\n\005CHASE\020\001\022\n\n\006ESCAPE\020"
    "\002\022\010\n\004BUFF\020\003\022\t\n\005SHOOT\020\004\"\226\001\n\nMutualInfo\0220\n"
    "\013robort_info\030\001 \001(\0132\033.roborts_decision.Ro"
    "botInfo\022,\n\006punish\030\002 \001(\0132\034.roborts_decisi"
    "on.PunishInfo\022(\n\006status\030\003 \001(\0132\030.roborts_"
    "decision.Status", 1775);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "decision.proto", &protobuf_RegisterTypes);
  Point::default_instance_ = new Point();
  EscapeConstraint::default_instance_ = new EscapeConstraint();
  SearchConstraint::default_instance_ = new SearchConstraint();
  WhirlVel::default_instance_ = new WhirlVel();
  Referee::default_instance_ = new Referee();
  TopicName::default_instance_ = new TopicName();
  DecisionConfig::default_instance_ = new DecisionConfig();
  RobotInfo::default_instance_ = new RobotInfo();
  PunishInfo::default_instance_ = new PunishInfo();
  Status::default_instance_ = new Status();
  MutualInfo::default_instance_ = new MutualInfo();
  Point::default_instance_->InitAsDefaultInstance();
  EscapeConstraint::default_instance_->InitAsDefaultInstance();
  SearchConstraint::default_instance_->InitAsDefaultInstance();
  WhirlVel::default_instance_->InitAsDefaultInstance();
  Referee::default_instance_->InitAsDefaultInstance();
  TopicName::default_instance_->InitAsDefaultInstance();
  DecisionConfig::default_instance_->InitAsDefaultInstance();
  RobotInfo::default_instance_->InitAsDefaultInstance();
  PunishInfo::default_instance_->InitAsDefaultInstance();
  Status::default_instance_->InitAsDefaultInstance();
  MutualInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_decision_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_decision_2eproto {
  StaticDescriptorInitializer_decision_2eproto() {
    protobuf_AddDesc_decision_2eproto();
  }
} static_descriptor_initializer_decision_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Point::kXFieldNumber;
const int Point::kYFieldNumber;
const int Point::kZFieldNumber;
const int Point::kRollFieldNumber;
const int Point::kPitchFieldNumber;
const int Point::kYawFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Point::Point()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:roborts_decision.Point)
}

void Point::InitAsDefaultInstance() {
}

Point::Point(const Point& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:roborts_decision.Point)
}

void Point::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  roll_ = 0;
  pitch_ = 0;
  yaw_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Point::~Point() {
  // @@protoc_insertion_point(destructor:roborts_decision.Point)
  SharedDtor();
}

void Point::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Point::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Point::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Point_descriptor_;
}

const Point& Point::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_decision_2eproto();
  return *default_instance_;
}

Point* Point::default_instance_ = NULL;

Point* Point::New(::google::protobuf::Arena* arena) const {
  Point* n = new Point;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Point::Clear() {
// @@protoc_insertion_point(message_clear_start:roborts_decision.Point)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Point, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Point*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 63u) {
    ZR_(x_, yaw_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Point::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:roborts_decision.Point)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float x = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // optional float y = 2;
      case 2: {
        if (tag == 21) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_z;
        break;
      }

      // optional float z = 3;
      case 3: {
        if (tag == 29) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_roll;
        break;
      }

      // optional float roll = 4;
      case 4: {
        if (tag == 37) {
         parse_roll:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &roll_)));
          set_has_roll();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_pitch;
        break;
      }

      // optional float pitch = 5;
      case 5: {
        if (tag == 45) {
         parse_pitch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pitch_)));
          set_has_pitch();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_yaw;
        break;
      }

      // optional float yaw = 6;
      case 6: {
        if (tag == 53) {
         parse_yaw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yaw_)));
          set_has_yaw();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:roborts_decision.Point)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:roborts_decision.Point)
  return false;
#undef DO_
}

void Point::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:roborts_decision.Point)
  // optional float x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // optional float y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // optional float z = 3;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }

  // optional float roll = 4;
  if (has_roll()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->roll(), output);
  }

  // optional float pitch = 5;
  if (has_pitch()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->pitch(), output);
  }

  // optional float yaw = 6;
  if (has_yaw()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->yaw(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:roborts_decision.Point)
}

::google::protobuf::uint8* Point::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:roborts_decision.Point)
  // optional float x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // optional float y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // optional float z = 3;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }

  // optional float roll = 4;
  if (has_roll()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->roll(), target);
  }

  // optional float pitch = 5;
  if (has_pitch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->pitch(), target);
  }

  // optional float yaw = 6;
  if (has_yaw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->yaw(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:roborts_decision.Point)
  return target;
}

int Point::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:roborts_decision.Point)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 63u) {
    // optional float x = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // optional float y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }

    // optional float z = 3;
    if (has_z()) {
      total_size += 1 + 4;
    }

    // optional float roll = 4;
    if (has_roll()) {
      total_size += 1 + 4;
    }

    // optional float pitch = 5;
    if (has_pitch()) {
      total_size += 1 + 4;
    }

    // optional float yaw = 6;
    if (has_yaw()) {
      total_size += 1 + 4;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Point::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:roborts_decision.Point)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Point* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Point>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:roborts_decision.Point)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:roborts_decision.Point)
    MergeFrom(*source);
  }
}

void Point::MergeFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:roborts_decision.Point)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
    if (from.has_roll()) {
      set_roll(from.roll());
    }
    if (from.has_pitch()) {
      set_pitch(from.pitch());
    }
    if (from.has_yaw()) {
      set_yaw(from.yaw());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Point::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:roborts_decision.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Point::CopyFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:roborts_decision.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point::IsInitialized() const {

  return true;
}

void Point::Swap(Point* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Point::InternalSwap(Point* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(z_, other->z_);
  std::swap(roll_, other->roll_);
  std::swap(pitch_, other->pitch_);
  std::swap(yaw_, other->yaw_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Point::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Point_descriptor_;
  metadata.reflection = Point_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Point

// optional float x = 1;
bool Point::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Point::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
void Point::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
void Point::clear_x() {
  x_ = 0;
  clear_has_x();
}
 float Point::x() const {
  // @@protoc_insertion_point(field_get:roborts_decision.Point.x)
  return x_;
}
 void Point::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:roborts_decision.Point.x)
}

// optional float y = 2;
bool Point::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Point::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
void Point::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
void Point::clear_y() {
  y_ = 0;
  clear_has_y();
}
 float Point::y() const {
  // @@protoc_insertion_point(field_get:roborts_decision.Point.y)
  return y_;
}
 void Point::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:roborts_decision.Point.y)
}

// optional float z = 3;
bool Point::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Point::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
void Point::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
void Point::clear_z() {
  z_ = 0;
  clear_has_z();
}
 float Point::z() const {
  // @@protoc_insertion_point(field_get:roborts_decision.Point.z)
  return z_;
}
 void Point::set_z(float value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:roborts_decision.Point.z)
}

// optional float roll = 4;
bool Point::has_roll() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Point::set_has_roll() {
  _has_bits_[0] |= 0x00000008u;
}
void Point::clear_has_roll() {
  _has_bits_[0] &= ~0x00000008u;
}
void Point::clear_roll() {
  roll_ = 0;
  clear_has_roll();
}
 float Point::roll() const {
  // @@protoc_insertion_point(field_get:roborts_decision.Point.roll)
  return roll_;
}
 void Point::set_roll(float value) {
  set_has_roll();
  roll_ = value;
  // @@protoc_insertion_point(field_set:roborts_decision.Point.roll)
}

// optional float pitch = 5;
bool Point::has_pitch() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Point::set_has_pitch() {
  _has_bits_[0] |= 0x00000010u;
}
void Point::clear_has_pitch() {
  _has_bits_[0] &= ~0x00000010u;
}
void Point::clear_pitch() {
  pitch_ = 0;
  clear_has_pitch();
}
 float Point::pitch() const {
  // @@protoc_insertion_point(field_get:roborts_decision.Point.pitch)
  return pitch_;
}
 void Point::set_pitch(float value) {
  set_has_pitch();
  pitch_ = value;
  // @@protoc_insertion_point(field_set:roborts_decision.Point.pitch)
}

// optional float yaw = 6;
bool Point::has_yaw() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Point::set_has_yaw() {
  _has_bits_[0] |= 0x00000020u;
}
void Point::clear_has_yaw() {
  _has_bits_[0] &= ~0x00000020u;
}
void Point::clear_yaw() {
  yaw_ = 0;
  clear_has_yaw();
}
 float Point::yaw() const {
  // @@protoc_insertion_point(field_get:roborts_decision.Point.yaw)
  return yaw_;
}
 void Point::set_yaw(float value) {
  set_has_yaw();
  yaw_ = value;
  // @@protoc_insertion_point(field_set:roborts_decision.Point.yaw)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EscapeConstraint::kLeftXLimitFieldNumber;
const int EscapeConstraint::kRightXLimitFieldNumber;
const int EscapeConstraint::kRobotXLimitFieldNumber;
const int EscapeConstraint::kLeftRandomMinXFieldNumber;
const int EscapeConstraint::kLeftRandomMaxXFieldNumber;
const int EscapeConstraint::kRightRandomMinXFieldNumber;
const int EscapeConstraint::kRightRandomMaxXFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EscapeConstraint::EscapeConstraint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:roborts_decision.EscapeConstraint)
}

void EscapeConstraint::InitAsDefaultInstance() {
}

EscapeConstraint::EscapeConstraint(const EscapeConstraint& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:roborts_decision.EscapeConstraint)
}

void EscapeConstraint::SharedCtor() {
  _cached_size_ = 0;
  left_x_limit_ = 0;
  right_x_limit_ = 0;
  robot_x_limit_ = 0;
  left_random_min_x_ = 0;
  left_random_max_x_ = 0;
  right_random_min_x_ = 0;
  right_random_max_x_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EscapeConstraint::~EscapeConstraint() {
  // @@protoc_insertion_point(destructor:roborts_decision.EscapeConstraint)
  SharedDtor();
}

void EscapeConstraint::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EscapeConstraint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EscapeConstraint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EscapeConstraint_descriptor_;
}

const EscapeConstraint& EscapeConstraint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_decision_2eproto();
  return *default_instance_;
}

EscapeConstraint* EscapeConstraint::default_instance_ = NULL;

EscapeConstraint* EscapeConstraint::New(::google::protobuf::Arena* arena) const {
  EscapeConstraint* n = new EscapeConstraint;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EscapeConstraint::Clear() {
// @@protoc_insertion_point(message_clear_start:roborts_decision.EscapeConstraint)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(EscapeConstraint, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<EscapeConstraint*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 127u) {
    ZR_(left_x_limit_, right_random_max_x_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool EscapeConstraint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:roborts_decision.EscapeConstraint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float left_x_limit = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &left_x_limit_)));
          set_has_left_x_limit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_right_x_limit;
        break;
      }

      // optional float right_x_limit = 2;
      case 2: {
        if (tag == 21) {
         parse_right_x_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &right_x_limit_)));
          set_has_right_x_limit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_robot_x_limit;
        break;
      }

      // optional float robot_x_limit = 3;
      case 3: {
        if (tag == 29) {
         parse_robot_x_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &robot_x_limit_)));
          set_has_robot_x_limit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_left_random_min_x;
        break;
      }

      // optional float left_random_min_x = 4;
      case 4: {
        if (tag == 37) {
         parse_left_random_min_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &left_random_min_x_)));
          set_has_left_random_min_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_left_random_max_x;
        break;
      }

      // optional float left_random_max_x = 5;
      case 5: {
        if (tag == 45) {
         parse_left_random_max_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &left_random_max_x_)));
          set_has_left_random_max_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_right_random_min_x;
        break;
      }

      // optional float right_random_min_x = 6;
      case 6: {
        if (tag == 53) {
         parse_right_random_min_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &right_random_min_x_)));
          set_has_right_random_min_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_right_random_max_x;
        break;
      }

      // optional float right_random_max_x = 7;
      case 7: {
        if (tag == 61) {
         parse_right_random_max_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &right_random_max_x_)));
          set_has_right_random_max_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:roborts_decision.EscapeConstraint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:roborts_decision.EscapeConstraint)
  return false;
#undef DO_
}

void EscapeConstraint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:roborts_decision.EscapeConstraint)
  // optional float left_x_limit = 1;
  if (has_left_x_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->left_x_limit(), output);
  }

  // optional float right_x_limit = 2;
  if (has_right_x_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->right_x_limit(), output);
  }

  // optional float robot_x_limit = 3;
  if (has_robot_x_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->robot_x_limit(), output);
  }

  // optional float left_random_min_x = 4;
  if (has_left_random_min_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->left_random_min_x(), output);
  }

  // optional float left_random_max_x = 5;
  if (has_left_random_max_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->left_random_max_x(), output);
  }

  // optional float right_random_min_x = 6;
  if (has_right_random_min_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->right_random_min_x(), output);
  }

  // optional float right_random_max_x = 7;
  if (has_right_random_max_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->right_random_max_x(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:roborts_decision.EscapeConstraint)
}

::google::protobuf::uint8* EscapeConstraint::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:roborts_decision.EscapeConstraint)
  // optional float left_x_limit = 1;
  if (has_left_x_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->left_x_limit(), target);
  }

  // optional float right_x_limit = 2;
  if (has_right_x_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->right_x_limit(), target);
  }

  // optional float robot_x_limit = 3;
  if (has_robot_x_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->robot_x_limit(), target);
  }

  // optional float left_random_min_x = 4;
  if (has_left_random_min_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->left_random_min_x(), target);
  }

  // optional float left_random_max_x = 5;
  if (has_left_random_max_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->left_random_max_x(), target);
  }

  // optional float right_random_min_x = 6;
  if (has_right_random_min_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->right_random_min_x(), target);
  }

  // optional float right_random_max_x = 7;
  if (has_right_random_max_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->right_random_max_x(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:roborts_decision.EscapeConstraint)
  return target;
}

int EscapeConstraint::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:roborts_decision.EscapeConstraint)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 127u) {
    // optional float left_x_limit = 1;
    if (has_left_x_limit()) {
      total_size += 1 + 4;
    }

    // optional float right_x_limit = 2;
    if (has_right_x_limit()) {
      total_size += 1 + 4;
    }

    // optional float robot_x_limit = 3;
    if (has_robot_x_limit()) {
      total_size += 1 + 4;
    }

    // optional float left_random_min_x = 4;
    if (has_left_random_min_x()) {
      total_size += 1 + 4;
    }

    // optional float left_random_max_x = 5;
    if (has_left_random_max_x()) {
      total_size += 1 + 4;
    }

    // optional float right_random_min_x = 6;
    if (has_right_random_min_x()) {
      total_size += 1 + 4;
    }

    // optional float right_random_max_x = 7;
    if (has_right_random_max_x()) {
      total_size += 1 + 4;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EscapeConstraint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:roborts_decision.EscapeConstraint)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const EscapeConstraint* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const EscapeConstraint>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:roborts_decision.EscapeConstraint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:roborts_decision.EscapeConstraint)
    MergeFrom(*source);
  }
}

void EscapeConstraint::MergeFrom(const EscapeConstraint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:roborts_decision.EscapeConstraint)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_left_x_limit()) {
      set_left_x_limit(from.left_x_limit());
    }
    if (from.has_right_x_limit()) {
      set_right_x_limit(from.right_x_limit());
    }
    if (from.has_robot_x_limit()) {
      set_robot_x_limit(from.robot_x_limit());
    }
    if (from.has_left_random_min_x()) {
      set_left_random_min_x(from.left_random_min_x());
    }
    if (from.has_left_random_max_x()) {
      set_left_random_max_x(from.left_random_max_x());
    }
    if (from.has_right_random_min_x()) {
      set_right_random_min_x(from.right_random_min_x());
    }
    if (from.has_right_random_max_x()) {
      set_right_random_max_x(from.right_random_max_x());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void EscapeConstraint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:roborts_decision.EscapeConstraint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EscapeConstraint::CopyFrom(const EscapeConstraint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:roborts_decision.EscapeConstraint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EscapeConstraint::IsInitialized() const {

  return true;
}

void EscapeConstraint::Swap(EscapeConstraint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EscapeConstraint::InternalSwap(EscapeConstraint* other) {
  std::swap(left_x_limit_, other->left_x_limit_);
  std::swap(right_x_limit_, other->right_x_limit_);
  std::swap(robot_x_limit_, other->robot_x_limit_);
  std::swap(left_random_min_x_, other->left_random_min_x_);
  std::swap(left_random_max_x_, other->left_random_max_x_);
  std::swap(right_random_min_x_, other->right_random_min_x_);
  std::swap(right_random_max_x_, other->right_random_max_x_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EscapeConstraint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EscapeConstraint_descriptor_;
  metadata.reflection = EscapeConstraint_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EscapeConstraint

// optional float left_x_limit = 1;
bool EscapeConstraint::has_left_x_limit() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void EscapeConstraint::set_has_left_x_limit() {
  _has_bits_[0] |= 0x00000001u;
}
void EscapeConstraint::clear_has_left_x_limit() {
  _has_bits_[0] &= ~0x00000001u;
}
void EscapeConstraint::clear_left_x_limit() {
  left_x_limit_ = 0;
  clear_has_left_x_limit();
}
 float EscapeConstraint::left_x_limit() const {
  // @@protoc_insertion_point(field_get:roborts_decision.EscapeConstraint.left_x_limit)
  return left_x_limit_;
}
 void EscapeConstraint::set_left_x_limit(float value) {
  set_has_left_x_limit();
  left_x_limit_ = value;
  // @@protoc_insertion_point(field_set:roborts_decision.EscapeConstraint.left_x_limit)
}

// optional float right_x_limit = 2;
bool EscapeConstraint::has_right_x_limit() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void EscapeConstraint::set_has_right_x_limit() {
  _has_bits_[0] |= 0x00000002u;
}
void EscapeConstraint::clear_has_right_x_limit() {
  _has_bits_[0] &= ~0x00000002u;
}
void EscapeConstraint::clear_right_x_limit() {
  right_x_limit_ = 0;
  clear_has_right_x_limit();
}
 float EscapeConstraint::right_x_limit() const {
  // @@protoc_insertion_point(field_get:roborts_decision.EscapeConstraint.right_x_limit)
  return right_x_limit_;
}
 void EscapeConstraint::set_right_x_limit(float value) {
  set_has_right_x_limit();
  right_x_limit_ = value;
  // @@protoc_insertion_point(field_set:roborts_decision.EscapeConstraint.right_x_limit)
}

// optional float robot_x_limit = 3;
bool EscapeConstraint::has_robot_x_limit() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void EscapeConstraint::set_has_robot_x_limit() {
  _has_bits_[0] |= 0x00000004u;
}
void EscapeConstraint::clear_has_robot_x_limit() {
  _has_bits_[0] &= ~0x00000004u;
}
void EscapeConstraint::clear_robot_x_limit() {
  robot_x_limit_ = 0;
  clear_has_robot_x_limit();
}
 float EscapeConstraint::robot_x_limit() const {
  // @@protoc_insertion_point(field_get:roborts_decision.EscapeConstraint.robot_x_limit)
  return robot_x_limit_;
}
 void EscapeConstraint::set_robot_x_limit(float value) {
  set_has_robot_x_limit();
  robot_x_limit_ = value;
  // @@protoc_insertion_point(field_set:roborts_decision.EscapeConstraint.robot_x_limit)
}

// optional float left_random_min_x = 4;
bool EscapeConstraint::has_left_random_min_x() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void EscapeConstraint::set_has_left_random_min_x() {
  _has_bits_[0] |= 0x00000008u;
}
void EscapeConstraint::clear_has_left_random_min_x() {
  _has_bits_[0] &= ~0x00000008u;
}
void EscapeConstraint::clear_left_random_min_x() {
  left_random_min_x_ = 0;
  clear_has_left_random_min_x();
}
 float EscapeConstraint::left_random_min_x() const {
  // @@protoc_insertion_point(field_get:roborts_decision.EscapeConstraint.left_random_min_x)
  return left_random_min_x_;
}
 void EscapeConstraint::set_left_random_min_x(float value) {
  set_has_left_random_min_x();
  left_random_min_x_ = value;
  // @@protoc_insertion_point(field_set:roborts_decision.EscapeConstraint.left_random_min_x)
}

// optional float left_random_max_x = 5;
bool EscapeConstraint::has_left_random_max_x() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void EscapeConstraint::set_has_left_random_max_x() {
  _has_bits_[0] |= 0x00000010u;
}
void EscapeConstraint::clear_has_left_random_max_x() {
  _has_bits_[0] &= ~0x00000010u;
}
void EscapeConstraint::clear_left_random_max_x() {
  left_random_max_x_ = 0;
  clear_has_left_random_max_x();
}
 float EscapeConstraint::left_random_max_x() const {
  // @@protoc_insertion_point(field_get:roborts_decision.EscapeConstraint.left_random_max_x)
  return left_random_max_x_;
}
 void EscapeConstraint::set_left_random_max_x(float value) {
  set_has_left_random_max_x();
  left_random_max_x_ = value;
  // @@protoc_insertion_point(field_set:roborts_decision.EscapeConstraint.left_random_max_x)
}

// optional float right_random_min_x = 6;
bool EscapeConstraint::has_right_random_min_x() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void EscapeConstraint::set_has_right_random_min_x() {
  _has_bits_[0] |= 0x00000020u;
}
void EscapeConstraint::clear_has_right_random_min_x() {
  _has_bits_[0] &= ~0x00000020u;
}
void EscapeConstraint::clear_right_random_min_x() {
  right_random_min_x_ = 0;
  clear_has_right_random_min_x();
}
 float EscapeConstraint::right_random_min_x() const {
  // @@protoc_insertion_point(field_get:roborts_decision.EscapeConstraint.right_random_min_x)
  return right_random_min_x_;
}
 void EscapeConstraint::set_right_random_min_x(float value) {
  set_has_right_random_min_x();
  right_random_min_x_ = value;
  // @@protoc_insertion_point(field_set:roborts_decision.EscapeConstraint.right_random_min_x)
}

// optional float right_random_max_x = 7;
bool EscapeConstraint::has_right_random_max_x() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void EscapeConstraint::set_has_right_random_max_x() {
  _has_bits_[0] |= 0x00000040u;
}
void EscapeConstraint::clear_has_right_random_max_x() {
  _has_bits_[0] &= ~0x00000040u;
}
void EscapeConstraint::clear_right_random_max_x() {
  right_random_max_x_ = 0;
  clear_has_right_random_max_x();
}
 float EscapeConstraint::right_random_max_x() const {
  // @@protoc_insertion_point(field_get:roborts_decision.EscapeConstraint.right_random_max_x)
  return right_random_max_x_;
}
 void EscapeConstraint::set_right_random_max_x(float value) {
  set_has_right_random_max_x();
  right_random_max_x_ = value;
  // @@protoc_insertion_point(field_set:roborts_decision.EscapeConstraint.right_random_max_x)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SearchConstraint::kXLimitFieldNumber;
const int SearchConstraint::kYLimitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SearchConstraint::SearchConstraint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:roborts_decision.SearchConstraint)
}

void SearchConstraint::InitAsDefaultInstance() {
}

SearchConstraint::SearchConstraint(const SearchConstraint& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:roborts_decision.SearchConstraint)
}

void SearchConstraint::SharedCtor() {
  _cached_size_ = 0;
  x_limit_ = 0;
  y_limit_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SearchConstraint::~SearchConstraint() {
  // @@protoc_insertion_point(destructor:roborts_decision.SearchConstraint)
  SharedDtor();
}

void SearchConstraint::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SearchConstraint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SearchConstraint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SearchConstraint_descriptor_;
}

const SearchConstraint& SearchConstraint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_decision_2eproto();
  return *default_instance_;
}

SearchConstraint* SearchConstraint::default_instance_ = NULL;

SearchConstraint* SearchConstraint::New(::google::protobuf::Arena* arena) const {
  SearchConstraint* n = new SearchConstraint;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SearchConstraint::Clear() {
// @@protoc_insertion_point(message_clear_start:roborts_decision.SearchConstraint)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SearchConstraint, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SearchConstraint*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(x_limit_, y_limit_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SearchConstraint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:roborts_decision.SearchConstraint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float x_limit = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_limit_)));
          set_has_x_limit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_y_limit;
        break;
      }

      // optional float y_limit = 2;
      case 2: {
        if (tag == 21) {
         parse_y_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_limit_)));
          set_has_y_limit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:roborts_decision.SearchConstraint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:roborts_decision.SearchConstraint)
  return false;
#undef DO_
}

void SearchConstraint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:roborts_decision.SearchConstraint)
  // optional float x_limit = 1;
  if (has_x_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x_limit(), output);
  }

  // optional float y_limit = 2;
  if (has_y_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y_limit(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:roborts_decision.SearchConstraint)
}

::google::protobuf::uint8* SearchConstraint::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:roborts_decision.SearchConstraint)
  // optional float x_limit = 1;
  if (has_x_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x_limit(), target);
  }

  // optional float y_limit = 2;
  if (has_y_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y_limit(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:roborts_decision.SearchConstraint)
  return target;
}

int SearchConstraint::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:roborts_decision.SearchConstraint)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional float x_limit = 1;
    if (has_x_limit()) {
      total_size += 1 + 4;
    }

    // optional float y_limit = 2;
    if (has_y_limit()) {
      total_size += 1 + 4;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SearchConstraint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:roborts_decision.SearchConstraint)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SearchConstraint* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SearchConstraint>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:roborts_decision.SearchConstraint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:roborts_decision.SearchConstraint)
    MergeFrom(*source);
  }
}

void SearchConstraint::MergeFrom(const SearchConstraint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:roborts_decision.SearchConstraint)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x_limit()) {
      set_x_limit(from.x_limit());
    }
    if (from.has_y_limit()) {
      set_y_limit(from.y_limit());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SearchConstraint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:roborts_decision.SearchConstraint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchConstraint::CopyFrom(const SearchConstraint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:roborts_decision.SearchConstraint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchConstraint::IsInitialized() const {

  return true;
}

void SearchConstraint::Swap(SearchConstraint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SearchConstraint::InternalSwap(SearchConstraint* other) {
  std::swap(x_limit_, other->x_limit_);
  std::swap(y_limit_, other->y_limit_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SearchConstraint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SearchConstraint_descriptor_;
  metadata.reflection = SearchConstraint_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SearchConstraint

// optional float x_limit = 1;
bool SearchConstraint::has_x_limit() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SearchConstraint::set_has_x_limit() {
  _has_bits_[0] |= 0x00000001u;
}
void SearchConstraint::clear_has_x_limit() {
  _has_bits_[0] &= ~0x00000001u;
}
void SearchConstraint::clear_x_limit() {
  x_limit_ = 0;
  clear_has_x_limit();
}
 float SearchConstraint::x_limit() const {
  // @@protoc_insertion_point(field_get:roborts_decision.SearchConstraint.x_limit)
  return x_limit_;
}
 void SearchConstraint::set_x_limit(float value) {
  set_has_x_limit();
  x_limit_ = value;
  // @@protoc_insertion_point(field_set:roborts_decision.SearchConstraint.x_limit)
}

// optional float y_limit = 2;
bool SearchConstraint::has_y_limit() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SearchConstraint::set_has_y_limit() {
  _has_bits_[0] |= 0x00000002u;
}
void SearchConstraint::clear_has_y_limit() {
  _has_bits_[0] &= ~0x00000002u;
}
void SearchConstraint::clear_y_limit() {
  y_limit_ = 0;
  clear_has_y_limit();
}
 float SearchConstraint::y_limit() const {
  // @@protoc_insertion_point(field_get:roborts_decision.SearchConstraint.y_limit)
  return y_limit_;
}
 void SearchConstraint::set_y_limit(float value) {
  set_has_y_limit();
  y_limit_ = value;
  // @@protoc_insertion_point(field_set:roborts_decision.SearchConstraint.y_limit)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WhirlVel::kAngleXVelFieldNumber;
const int WhirlVel::kAngleYVelFieldNumber;
const int WhirlVel::kAngleZVelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WhirlVel::WhirlVel()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:roborts_decision.WhirlVel)
}

void WhirlVel::InitAsDefaultInstance() {
}

WhirlVel::WhirlVel(const WhirlVel& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:roborts_decision.WhirlVel)
}

void WhirlVel::SharedCtor() {
  _cached_size_ = 0;
  angle_x_vel_ = 0;
  angle_y_vel_ = 0;
  angle_z_vel_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WhirlVel::~WhirlVel() {
  // @@protoc_insertion_point(destructor:roborts_decision.WhirlVel)
  SharedDtor();
}

void WhirlVel::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WhirlVel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WhirlVel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WhirlVel_descriptor_;
}

const WhirlVel& WhirlVel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_decision_2eproto();
  return *default_instance_;
}

WhirlVel* WhirlVel::default_instance_ = NULL;

WhirlVel* WhirlVel::New(::google::protobuf::Arena* arena) const {
  WhirlVel* n = new WhirlVel;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WhirlVel::Clear() {
// @@protoc_insertion_point(message_clear_start:roborts_decision.WhirlVel)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(WhirlVel, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<WhirlVel*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(angle_x_vel_, angle_z_vel_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool WhirlVel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:roborts_decision.WhirlVel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float angle_x_vel = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &angle_x_vel_)));
          set_has_angle_x_vel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_angle_y_vel;
        break;
      }

      // optional float angle_y_vel = 2;
      case 2: {
        if (tag == 21) {
         parse_angle_y_vel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &angle_y_vel_)));
          set_has_angle_y_vel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_angle_z_vel;
        break;
      }

      // optional float angle_z_vel = 3;
      case 3: {
        if (tag == 29) {
         parse_angle_z_vel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &angle_z_vel_)));
          set_has_angle_z_vel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:roborts_decision.WhirlVel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:roborts_decision.WhirlVel)
  return false;
#undef DO_
}

void WhirlVel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:roborts_decision.WhirlVel)
  // optional float angle_x_vel = 1;
  if (has_angle_x_vel()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->angle_x_vel(), output);
  }

  // optional float angle_y_vel = 2;
  if (has_angle_y_vel()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->angle_y_vel(), output);
  }

  // optional float angle_z_vel = 3;
  if (has_angle_z_vel()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->angle_z_vel(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:roborts_decision.WhirlVel)
}

::google::protobuf::uint8* WhirlVel::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:roborts_decision.WhirlVel)
  // optional float angle_x_vel = 1;
  if (has_angle_x_vel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->angle_x_vel(), target);
  }

  // optional float angle_y_vel = 2;
  if (has_angle_y_vel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->angle_y_vel(), target);
  }

  // optional float angle_z_vel = 3;
  if (has_angle_z_vel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->angle_z_vel(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:roborts_decision.WhirlVel)
  return target;
}

int WhirlVel::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:roborts_decision.WhirlVel)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional float angle_x_vel = 1;
    if (has_angle_x_vel()) {
      total_size += 1 + 4;
    }

    // optional float angle_y_vel = 2;
    if (has_angle_y_vel()) {
      total_size += 1 + 4;
    }

    // optional float angle_z_vel = 3;
    if (has_angle_z_vel()) {
      total_size += 1 + 4;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WhirlVel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:roborts_decision.WhirlVel)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const WhirlVel* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const WhirlVel>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:roborts_decision.WhirlVel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:roborts_decision.WhirlVel)
    MergeFrom(*source);
  }
}

void WhirlVel::MergeFrom(const WhirlVel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:roborts_decision.WhirlVel)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_angle_x_vel()) {
      set_angle_x_vel(from.angle_x_vel());
    }
    if (from.has_angle_y_vel()) {
      set_angle_y_vel(from.angle_y_vel());
    }
    if (from.has_angle_z_vel()) {
      set_angle_z_vel(from.angle_z_vel());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void WhirlVel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:roborts_decision.WhirlVel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WhirlVel::CopyFrom(const WhirlVel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:roborts_decision.WhirlVel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WhirlVel::IsInitialized() const {

  return true;
}

void WhirlVel::Swap(WhirlVel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WhirlVel::InternalSwap(WhirlVel* other) {
  std::swap(angle_x_vel_, other->angle_x_vel_);
  std::swap(angle_y_vel_, other->angle_y_vel_);
  std::swap(angle_z_vel_, other->angle_z_vel_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WhirlVel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WhirlVel_descriptor_;
  metadata.reflection = WhirlVel_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WhirlVel

// optional float angle_x_vel = 1;
bool WhirlVel::has_angle_x_vel() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void WhirlVel::set_has_angle_x_vel() {
  _has_bits_[0] |= 0x00000001u;
}
void WhirlVel::clear_has_angle_x_vel() {
  _has_bits_[0] &= ~0x00000001u;
}
void WhirlVel::clear_angle_x_vel() {
  angle_x_vel_ = 0;
  clear_has_angle_x_vel();
}
 float WhirlVel::angle_x_vel() const {
  // @@protoc_insertion_point(field_get:roborts_decision.WhirlVel.angle_x_vel)
  return angle_x_vel_;
}
 void WhirlVel::set_angle_x_vel(float value) {
  set_has_angle_x_vel();
  angle_x_vel_ = value;
  // @@protoc_insertion_point(field_set:roborts_decision.WhirlVel.angle_x_vel)
}

// optional float angle_y_vel = 2;
bool WhirlVel::has_angle_y_vel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void WhirlVel::set_has_angle_y_vel() {
  _has_bits_[0] |= 0x00000002u;
}
void WhirlVel::clear_has_angle_y_vel() {
  _has_bits_[0] &= ~0x00000002u;
}
void WhirlVel::clear_angle_y_vel() {
  angle_y_vel_ = 0;
  clear_has_angle_y_vel();
}
 float WhirlVel::angle_y_vel() const {
  // @@protoc_insertion_point(field_get:roborts_decision.WhirlVel.angle_y_vel)
  return angle_y_vel_;
}
 void WhirlVel::set_angle_y_vel(float value) {
  set_has_angle_y_vel();
  angle_y_vel_ = value;
  // @@protoc_insertion_point(field_set:roborts_decision.WhirlVel.angle_y_vel)
}

// optional float angle_z_vel = 3;
bool WhirlVel::has_angle_z_vel() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void WhirlVel::set_has_angle_z_vel() {
  _has_bits_[0] |= 0x00000004u;
}
void WhirlVel::clear_has_angle_z_vel() {
  _has_bits_[0] &= ~0x00000004u;
}
void WhirlVel::clear_angle_z_vel() {
  angle_z_vel_ = 0;
  clear_has_angle_z_vel();
}
 float WhirlVel::angle_z_vel() const {
  // @@protoc_insertion_point(field_get:roborts_decision.WhirlVel.angle_z_vel)
  return angle_z_vel_;
}
 void WhirlVel::set_angle_z_vel(float value) {
  set_has_angle_z_vel();
  angle_z_vel_ = value;
  // @@protoc_insertion_point(field_set:roborts_decision.WhirlVel.angle_z_vel)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Referee::kGameResultFieldNumber;
const int Referee::kGameStatusFieldNumber;
const int Referee::kGameSurvivorFieldNumber;
const int Referee::kRobortStatusFieldNumber;
const int Referee::kRobortHeatFieldNumber;
const int Referee::kRobortBonusFieldNumber;
const int Referee::kRobortDamageFieldNumber;
const int Referee::kRobortShootFieldNumber;
const int Referee::kBonusStatusFieldNumber;
const int Referee::kLocalNameFieldNumber;
const int Referee::kRemoteNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Referee::Referee()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:roborts_decision.Referee)
}

void Referee::InitAsDefaultInstance() {
}

Referee::Referee(const Referee& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:roborts_decision.Referee)
}

void Referee::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  game_result_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  game_status_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  game_survivor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  robort_status_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  robort_heat_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  robort_bonus_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  robort_damage_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  robort_shoot_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bonus_status_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  local_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  remote_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Referee::~Referee() {
  // @@protoc_insertion_point(destructor:roborts_decision.Referee)
  SharedDtor();
}

void Referee::SharedDtor() {
  game_result_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  game_status_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  game_survivor_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  robort_status_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  robort_heat_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  robort_bonus_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  robort_damage_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  robort_shoot_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bonus_status_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  local_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  remote_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Referee::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Referee::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Referee_descriptor_;
}

const Referee& Referee::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_decision_2eproto();
  return *default_instance_;
}

Referee* Referee::default_instance_ = NULL;

Referee* Referee::New(::google::protobuf::Arena* arena) const {
  Referee* n = new Referee;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Referee::Clear() {
// @@protoc_insertion_point(message_clear_start:roborts_decision.Referee)
  if (_has_bits_[0 / 32] & 255u) {
    if (has_game_result()) {
      game_result_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_game_status()) {
      game_status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_game_survivor()) {
      game_survivor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_robort_status()) {
      robort_status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_robort_heat()) {
      robort_heat_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_robort_bonus()) {
      robort_bonus_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_robort_damage()) {
      robort_damage_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_robort_shoot()) {
      robort_shoot_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (_has_bits_[8 / 32] & 1792u) {
    if (has_bonus_status()) {
      bonus_status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_local_name()) {
      local_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_remote_name()) {
      remote_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Referee::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:roborts_decision.Referee)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string game_status = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_game_status()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->game_status().data(), this->game_status().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "roborts_decision.Referee.game_status");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_game_result;
        break;
      }

      // optional string game_result = 2;
      case 2: {
        if (tag == 18) {
         parse_game_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_game_result()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->game_result().data(), this->game_result().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "roborts_decision.Referee.game_result");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_game_survivor;
        break;
      }

      // optional string game_survivor = 3;
      case 3: {
        if (tag == 26) {
         parse_game_survivor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_game_survivor()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->game_survivor().data(), this->game_survivor().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "roborts_decision.Referee.game_survivor");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_robort_status;
        break;
      }

      // optional string robort_status = 4;
      case 4: {
        if (tag == 34) {
         parse_robort_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_robort_status()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->robort_status().data(), this->robort_status().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "roborts_decision.Referee.robort_status");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_robort_heat;
        break;
      }

      // optional string robort_heat = 5;
      case 5: {
        if (tag == 42) {
         parse_robort_heat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_robort_heat()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->robort_heat().data(), this->robort_heat().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "roborts_decision.Referee.robort_heat");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_robort_bonus;
        break;
      }

      // optional string robort_bonus = 6;
      case 6: {
        if (tag == 50) {
         parse_robort_bonus:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_robort_bonus()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->robort_bonus().data(), this->robort_bonus().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "roborts_decision.Referee.robort_bonus");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_robort_damage;
        break;
      }

      // optional string robort_damage = 7;
      case 7: {
        if (tag == 58) {
         parse_robort_damage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_robort_damage()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->robort_damage().data(), this->robort_damage().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "roborts_decision.Referee.robort_damage");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_robort_shoot;
        break;
      }

      // optional string robort_shoot = 8;
      case 8: {
        if (tag == 66) {
         parse_robort_shoot:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_robort_shoot()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->robort_shoot().data(), this->robort_shoot().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "roborts_decision.Referee.robort_shoot");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_bonus_status;
        break;
      }

      // optional string bonus_status = 9;
      case 9: {
        if (tag == 74) {
         parse_bonus_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bonus_status()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bonus_status().data(), this->bonus_status().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "roborts_decision.Referee.bonus_status");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_local_name;
        break;
      }

      // optional string local_name = 10;
      case 10: {
        if (tag == 82) {
         parse_local_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_local_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->local_name().data(), this->local_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "roborts_decision.Referee.local_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_remote_name;
        break;
      }

      // optional string remote_name = 11;
      case 11: {
        if (tag == 90) {
         parse_remote_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_remote_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->remote_name().data(), this->remote_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "roborts_decision.Referee.remote_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:roborts_decision.Referee)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:roborts_decision.Referee)
  return false;
#undef DO_
}

void Referee::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:roborts_decision.Referee)
  // optional string game_status = 1;
  if (has_game_status()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->game_status().data(), this->game_status().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "roborts_decision.Referee.game_status");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->game_status(), output);
  }

  // optional string game_result = 2;
  if (has_game_result()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->game_result().data(), this->game_result().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "roborts_decision.Referee.game_result");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->game_result(), output);
  }

  // optional string game_survivor = 3;
  if (has_game_survivor()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->game_survivor().data(), this->game_survivor().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "roborts_decision.Referee.game_survivor");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->game_survivor(), output);
  }

  // optional string robort_status = 4;
  if (has_robort_status()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->robort_status().data(), this->robort_status().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "roborts_decision.Referee.robort_status");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->robort_status(), output);
  }

  // optional string robort_heat = 5;
  if (has_robort_heat()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->robort_heat().data(), this->robort_heat().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "roborts_decision.Referee.robort_heat");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->robort_heat(), output);
  }

  // optional string robort_bonus = 6;
  if (has_robort_bonus()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->robort_bonus().data(), this->robort_bonus().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "roborts_decision.Referee.robort_bonus");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->robort_bonus(), output);
  }

  // optional string robort_damage = 7;
  if (has_robort_damage()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->robort_damage().data(), this->robort_damage().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "roborts_decision.Referee.robort_damage");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->robort_damage(), output);
  }

  // optional string robort_shoot = 8;
  if (has_robort_shoot()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->robort_shoot().data(), this->robort_shoot().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "roborts_decision.Referee.robort_shoot");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->robort_shoot(), output);
  }

  // optional string bonus_status = 9;
  if (has_bonus_status()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bonus_status().data(), this->bonus_status().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "roborts_decision.Referee.bonus_status");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->bonus_status(), output);
  }

  // optional string local_name = 10;
  if (has_local_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->local_name().data(), this->local_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "roborts_decision.Referee.local_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->local_name(), output);
  }

  // optional string remote_name = 11;
  if (has_remote_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->remote_name().data(), this->remote_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "roborts_decision.Referee.remote_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->remote_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:roborts_decision.Referee)
}

::google::protobuf::uint8* Referee::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:roborts_decision.Referee)
  // optional string game_status = 1;
  if (has_game_status()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->game_status().data(), this->game_status().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "roborts_decision.Referee.game_status");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->game_status(), target);
  }

  // optional string game_result = 2;
  if (has_game_result()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->game_result().data(), this->game_result().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "roborts_decision.Referee.game_result");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->game_result(), target);
  }

  // optional string game_survivor = 3;
  if (has_game_survivor()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->game_survivor().data(), this->game_survivor().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "roborts_decision.Referee.game_survivor");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->game_survivor(), target);
  }

  // optional string robort_status = 4;
  if (has_robort_status()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->robort_status().data(), this->robort_status().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "roborts_decision.Referee.robort_status");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->robort_status(), target);
  }

  // optional string robort_heat = 5;
  if (has_robort_heat()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->robort_heat().data(), this->robort_heat().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "roborts_decision.Referee.robort_heat");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->robort_heat(), target);
  }

  // optional string robort_bonus = 6;
  if (has_robort_bonus()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->robort_bonus().data(), this->robort_bonus().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "roborts_decision.Referee.robort_bonus");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->robort_bonus(), target);
  }

  // optional string robort_damage = 7;
  if (has_robort_damage()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->robort_damage().data(), this->robort_damage().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "roborts_decision.Referee.robort_damage");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->robort_damage(), target);
  }

  // optional string robort_shoot = 8;
  if (has_robort_shoot()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->robort_shoot().data(), this->robort_shoot().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "roborts_decision.Referee.robort_shoot");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->robort_shoot(), target);
  }

  // optional string bonus_status = 9;
  if (has_bonus_status()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bonus_status().data(), this->bonus_status().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "roborts_decision.Referee.bonus_status");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->bonus_status(), target);
  }

  // optional string local_name = 10;
  if (has_local_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->local_name().data(), this->local_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "roborts_decision.Referee.local_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->local_name(), target);
  }

  // optional string remote_name = 11;
  if (has_remote_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->remote_name().data(), this->remote_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "roborts_decision.Referee.remote_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->remote_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:roborts_decision.Referee)
  return target;
}

int Referee::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:roborts_decision.Referee)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional string game_result = 2;
    if (has_game_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->game_result());
    }

    // optional string game_status = 1;
    if (has_game_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->game_status());
    }

    // optional string game_survivor = 3;
    if (has_game_survivor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->game_survivor());
    }

    // optional string robort_status = 4;
    if (has_robort_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->robort_status());
    }

    // optional string robort_heat = 5;
    if (has_robort_heat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->robort_heat());
    }

    // optional string robort_bonus = 6;
    if (has_robort_bonus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->robort_bonus());
    }

    // optional string robort_damage = 7;
    if (has_robort_damage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->robort_damage());
    }

    // optional string robort_shoot = 8;
    if (has_robort_shoot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->robort_shoot());
    }

  }
  if (_has_bits_[8 / 32] & 1792u) {
    // optional string bonus_status = 9;
    if (has_bonus_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bonus_status());
    }

    // optional string local_name = 10;
    if (has_local_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->local_name());
    }

    // optional string remote_name = 11;
    if (has_remote_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->remote_name());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Referee::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:roborts_decision.Referee)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Referee* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Referee>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:roborts_decision.Referee)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:roborts_decision.Referee)
    MergeFrom(*source);
  }
}

void Referee::MergeFrom(const Referee& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:roborts_decision.Referee)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_game_result()) {
      set_has_game_result();
      game_result_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.game_result_);
    }
    if (from.has_game_status()) {
      set_has_game_status();
      game_status_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.game_status_);
    }
    if (from.has_game_survivor()) {
      set_has_game_survivor();
      game_survivor_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.game_survivor_);
    }
    if (from.has_robort_status()) {
      set_has_robort_status();
      robort_status_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.robort_status_);
    }
    if (from.has_robort_heat()) {
      set_has_robort_heat();
      robort_heat_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.robort_heat_);
    }
    if (from.has_robort_bonus()) {
      set_has_robort_bonus();
      robort_bonus_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.robort_bonus_);
    }
    if (from.has_robort_damage()) {
      set_has_robort_damage();
      robort_damage_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.robort_damage_);
    }
    if (from.has_robort_shoot()) {
      set_has_robort_shoot();
      robort_shoot_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.robort_shoot_);
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_bonus_status()) {
      set_has_bonus_status();
      bonus_status_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bonus_status_);
    }
    if (from.has_local_name()) {
      set_has_local_name();
      local_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.local_name_);
    }
    if (from.has_remote_name()) {
      set_has_remote_name();
      remote_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.remote_name_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Referee::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:roborts_decision.Referee)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Referee::CopyFrom(const Referee& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:roborts_decision.Referee)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Referee::IsInitialized() const {

  return true;
}

void Referee::Swap(Referee* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Referee::InternalSwap(Referee* other) {
  game_result_.Swap(&other->game_result_);
  game_status_.Swap(&other->game_status_);
  game_survivor_.Swap(&other->game_survivor_);
  robort_status_.Swap(&other->robort_status_);
  robort_heat_.Swap(&other->robort_heat_);
  robort_bonus_.Swap(&other->robort_bonus_);
  robort_damage_.Swap(&other->robort_damage_);
  robort_shoot_.Swap(&other->robort_shoot_);
  bonus_status_.Swap(&other->bonus_status_);
  local_name_.Swap(&other->local_name_);
  remote_name_.Swap(&other->remote_name_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Referee::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Referee_descriptor_;
  metadata.reflection = Referee_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Referee

// optional string game_result = 2;
bool Referee::has_game_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Referee::set_has_game_result() {
  _has_bits_[0] |= 0x00000001u;
}
void Referee::clear_has_game_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void Referee::clear_game_result() {
  game_result_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_game_result();
}
 const ::std::string& Referee::game_result() const {
  // @@protoc_insertion_point(field_get:roborts_decision.Referee.game_result)
  return game_result_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Referee::set_game_result(const ::std::string& value) {
  set_has_game_result();
  game_result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:roborts_decision.Referee.game_result)
}
 void Referee::set_game_result(const char* value) {
  set_has_game_result();
  game_result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:roborts_decision.Referee.game_result)
}
 void Referee::set_game_result(const char* value, size_t size) {
  set_has_game_result();
  game_result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:roborts_decision.Referee.game_result)
}
 ::std::string* Referee::mutable_game_result() {
  set_has_game_result();
  // @@protoc_insertion_point(field_mutable:roborts_decision.Referee.game_result)
  return game_result_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Referee::release_game_result() {
  // @@protoc_insertion_point(field_release:roborts_decision.Referee.game_result)
  clear_has_game_result();
  return game_result_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Referee::set_allocated_game_result(::std::string* game_result) {
  if (game_result != NULL) {
    set_has_game_result();
  } else {
    clear_has_game_result();
  }
  game_result_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), game_result);
  // @@protoc_insertion_point(field_set_allocated:roborts_decision.Referee.game_result)
}

// optional string game_status = 1;
bool Referee::has_game_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Referee::set_has_game_status() {
  _has_bits_[0] |= 0x00000002u;
}
void Referee::clear_has_game_status() {
  _has_bits_[0] &= ~0x00000002u;
}
void Referee::clear_game_status() {
  game_status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_game_status();
}
 const ::std::string& Referee::game_status() const {
  // @@protoc_insertion_point(field_get:roborts_decision.Referee.game_status)
  return game_status_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Referee::set_game_status(const ::std::string& value) {
  set_has_game_status();
  game_status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:roborts_decision.Referee.game_status)
}
 void Referee::set_game_status(const char* value) {
  set_has_game_status();
  game_status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:roborts_decision.Referee.game_status)
}
 void Referee::set_game_status(const char* value, size_t size) {
  set_has_game_status();
  game_status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:roborts_decision.Referee.game_status)
}
 ::std::string* Referee::mutable_game_status() {
  set_has_game_status();
  // @@protoc_insertion_point(field_mutable:roborts_decision.Referee.game_status)
  return game_status_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Referee::release_game_status() {
  // @@protoc_insertion_point(field_release:roborts_decision.Referee.game_status)
  clear_has_game_status();
  return game_status_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Referee::set_allocated_game_status(::std::string* game_status) {
  if (game_status != NULL) {
    set_has_game_status();
  } else {
    clear_has_game_status();
  }
  game_status_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), game_status);
  // @@protoc_insertion_point(field_set_allocated:roborts_decision.Referee.game_status)
}

// optional string game_survivor = 3;
bool Referee::has_game_survivor() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Referee::set_has_game_survivor() {
  _has_bits_[0] |= 0x00000004u;
}
void Referee::clear_has_game_survivor() {
  _has_bits_[0] &= ~0x00000004u;
}
void Referee::clear_game_survivor() {
  game_survivor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_game_survivor();
}
 const ::std::string& Referee::game_survivor() const {
  // @@protoc_insertion_point(field_get:roborts_decision.Referee.game_survivor)
  return game_survivor_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Referee::set_game_survivor(const ::std::string& value) {
  set_has_game_survivor();
  game_survivor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:roborts_decision.Referee.game_survivor)
}
 void Referee::set_game_survivor(const char* value) {
  set_has_game_survivor();
  game_survivor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:roborts_decision.Referee.game_survivor)
}
 void Referee::set_game_survivor(const char* value, size_t size) {
  set_has_game_survivor();
  game_survivor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:roborts_decision.Referee.game_survivor)
}
 ::std::string* Referee::mutable_game_survivor() {
  set_has_game_survivor();
  // @@protoc_insertion_point(field_mutable:roborts_decision.Referee.game_survivor)
  return game_survivor_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Referee::release_game_survivor() {
  // @@protoc_insertion_point(field_release:roborts_decision.Referee.game_survivor)
  clear_has_game_survivor();
  return game_survivor_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Referee::set_allocated_game_survivor(::std::string* game_survivor) {
  if (game_survivor != NULL) {
    set_has_game_survivor();
  } else {
    clear_has_game_survivor();
  }
  game_survivor_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), game_survivor);
  // @@protoc_insertion_point(field_set_allocated:roborts_decision.Referee.game_survivor)
}

// optional string robort_status = 4;
bool Referee::has_robort_status() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Referee::set_has_robort_status() {
  _has_bits_[0] |= 0x00000008u;
}
void Referee::clear_has_robort_status() {
  _has_bits_[0] &= ~0x00000008u;
}
void Referee::clear_robort_status() {
  robort_status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_robort_status();
}
 const ::std::string& Referee::robort_status() const {
  // @@protoc_insertion_point(field_get:roborts_decision.Referee.robort_status)
  return robort_status_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Referee::set_robort_status(const ::std::string& value) {
  set_has_robort_status();
  robort_status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:roborts_decision.Referee.robort_status)
}
 void Referee::set_robort_status(const char* value) {
  set_has_robort_status();
  robort_status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:roborts_decision.Referee.robort_status)
}
 void Referee::set_robort_status(const char* value, size_t size) {
  set_has_robort_status();
  robort_status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:roborts_decision.Referee.robort_status)
}
 ::std::string* Referee::mutable_robort_status() {
  set_has_robort_status();
  // @@protoc_insertion_point(field_mutable:roborts_decision.Referee.robort_status)
  return robort_status_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Referee::release_robort_status() {
  // @@protoc_insertion_point(field_release:roborts_decision.Referee.robort_status)
  clear_has_robort_status();
  return robort_status_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Referee::set_allocated_robort_status(::std::string* robort_status) {
  if (robort_status != NULL) {
    set_has_robort_status();
  } else {
    clear_has_robort_status();
  }
  robort_status_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), robort_status);
  // @@protoc_insertion_point(field_set_allocated:roborts_decision.Referee.robort_status)
}

// optional string robort_heat = 5;
bool Referee::has_robort_heat() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Referee::set_has_robort_heat() {
  _has_bits_[0] |= 0x00000010u;
}
void Referee::clear_has_robort_heat() {
  _has_bits_[0] &= ~0x00000010u;
}
void Referee::clear_robort_heat() {
  robort_heat_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_robort_heat();
}
 const ::std::string& Referee::robort_heat() const {
  // @@protoc_insertion_point(field_get:roborts_decision.Referee.robort_heat)
  return robort_heat_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Referee::set_robort_heat(const ::std::string& value) {
  set_has_robort_heat();
  robort_heat_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:roborts_decision.Referee.robort_heat)
}
 void Referee::set_robort_heat(const char* value) {
  set_has_robort_heat();
  robort_heat_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:roborts_decision.Referee.robort_heat)
}
 void Referee::set_robort_heat(const char* value, size_t size) {
  set_has_robort_heat();
  robort_heat_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:roborts_decision.Referee.robort_heat)
}
 ::std::string* Referee::mutable_robort_heat() {
  set_has_robort_heat();
  // @@protoc_insertion_point(field_mutable:roborts_decision.Referee.robort_heat)
  return robort_heat_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Referee::release_robort_heat() {
  // @@protoc_insertion_point(field_release:roborts_decision.Referee.robort_heat)
  clear_has_robort_heat();
  return robort_heat_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Referee::set_allocated_robort_heat(::std::string* robort_heat) {
  if (robort_heat != NULL) {
    set_has_robort_heat();
  } else {
    clear_has_robort_heat();
  }
  robort_heat_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), robort_heat);
  // @@protoc_insertion_point(field_set_allocated:roborts_decision.Referee.robort_heat)
}

// optional string robort_bonus = 6;
bool Referee::has_robort_bonus() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Referee::set_has_robort_bonus() {
  _has_bits_[0] |= 0x00000020u;
}
void Referee::clear_has_robort_bonus() {
  _has_bits_[0] &= ~0x00000020u;
}
void Referee::clear_robort_bonus() {
  robort_bonus_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_robort_bonus();
}
 const ::std::string& Referee::robort_bonus() const {
  // @@protoc_insertion_point(field_get:roborts_decision.Referee.robort_bonus)
  return robort_bonus_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Referee::set_robort_bonus(const ::std::string& value) {
  set_has_robort_bonus();
  robort_bonus_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:roborts_decision.Referee.robort_bonus)
}
 void Referee::set_robort_bonus(const char* value) {
  set_has_robort_bonus();
  robort_bonus_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:roborts_decision.Referee.robort_bonus)
}
 void Referee::set_robort_bonus(const char* value, size_t size) {
  set_has_robort_bonus();
  robort_bonus_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:roborts_decision.Referee.robort_bonus)
}
 ::std::string* Referee::mutable_robort_bonus() {
  set_has_robort_bonus();
  // @@protoc_insertion_point(field_mutable:roborts_decision.Referee.robort_bonus)
  return robort_bonus_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Referee::release_robort_bonus() {
  // @@protoc_insertion_point(field_release:roborts_decision.Referee.robort_bonus)
  clear_has_robort_bonus();
  return robort_bonus_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Referee::set_allocated_robort_bonus(::std::string* robort_bonus) {
  if (robort_bonus != NULL) {
    set_has_robort_bonus();
  } else {
    clear_has_robort_bonus();
  }
  robort_bonus_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), robort_bonus);
  // @@protoc_insertion_point(field_set_allocated:roborts_decision.Referee.robort_bonus)
}

// optional string robort_damage = 7;
bool Referee::has_robort_damage() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Referee::set_has_robort_damage() {
  _has_bits_[0] |= 0x00000040u;
}
void Referee::clear_has_robort_damage() {
  _has_bits_[0] &= ~0x00000040u;
}
void Referee::clear_robort_damage() {
  robort_damage_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_robort_damage();
}
 const ::std::string& Referee::robort_damage() const {
  // @@protoc_insertion_point(field_get:roborts_decision.Referee.robort_damage)
  return robort_damage_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Referee::set_robort_damage(const ::std::string& value) {
  set_has_robort_damage();
  robort_damage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:roborts_decision.Referee.robort_damage)
}
 void Referee::set_robort_damage(const char* value) {
  set_has_robort_damage();
  robort_damage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:roborts_decision.Referee.robort_damage)
}
 void Referee::set_robort_damage(const char* value, size_t size) {
  set_has_robort_damage();
  robort_damage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:roborts_decision.Referee.robort_damage)
}
 ::std::string* Referee::mutable_robort_damage() {
  set_has_robort_damage();
  // @@protoc_insertion_point(field_mutable:roborts_decision.Referee.robort_damage)
  return robort_damage_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Referee::release_robort_damage() {
  // @@protoc_insertion_point(field_release:roborts_decision.Referee.robort_damage)
  clear_has_robort_damage();
  return robort_damage_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Referee::set_allocated_robort_damage(::std::string* robort_damage) {
  if (robort_damage != NULL) {
    set_has_robort_damage();
  } else {
    clear_has_robort_damage();
  }
  robort_damage_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), robort_damage);
  // @@protoc_insertion_point(field_set_allocated:roborts_decision.Referee.robort_damage)
}

// optional string robort_shoot = 8;
bool Referee::has_robort_shoot() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Referee::set_has_robort_shoot() {
  _has_bits_[0] |= 0x00000080u;
}
void Referee::clear_has_robort_shoot() {
  _has_bits_[0] &= ~0x00000080u;
}
void Referee::clear_robort_shoot() {
  robort_shoot_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_robort_shoot();
}
 const ::std::string& Referee::robort_shoot() const {
  // @@protoc_insertion_point(field_get:roborts_decision.Referee.robort_shoot)
  return robort_shoot_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Referee::set_robort_shoot(const ::std::string& value) {
  set_has_robort_shoot();
  robort_shoot_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:roborts_decision.Referee.robort_shoot)
}
 void Referee::set_robort_shoot(const char* value) {
  set_has_robort_shoot();
  robort_shoot_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:roborts_decision.Referee.robort_shoot)
}
 void Referee::set_robort_shoot(const char* value, size_t size) {
  set_has_robort_shoot();
  robort_shoot_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:roborts_decision.Referee.robort_shoot)
}
 ::std::string* Referee::mutable_robort_shoot() {
  set_has_robort_shoot();
  // @@protoc_insertion_point(field_mutable:roborts_decision.Referee.robort_shoot)
  return robort_shoot_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Referee::release_robort_shoot() {
  // @@protoc_insertion_point(field_release:roborts_decision.Referee.robort_shoot)
  clear_has_robort_shoot();
  return robort_shoot_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Referee::set_allocated_robort_shoot(::std::string* robort_shoot) {
  if (robort_shoot != NULL) {
    set_has_robort_shoot();
  } else {
    clear_has_robort_shoot();
  }
  robort_shoot_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), robort_shoot);
  // @@protoc_insertion_point(field_set_allocated:roborts_decision.Referee.robort_shoot)
}

// optional string bonus_status = 9;
bool Referee::has_bonus_status() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Referee::set_has_bonus_status() {
  _has_bits_[0] |= 0x00000100u;
}
void Referee::clear_has_bonus_status() {
  _has_bits_[0] &= ~0x00000100u;
}
void Referee::clear_bonus_status() {
  bonus_status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bonus_status();
}
 const ::std::string& Referee::bonus_status() const {
  // @@protoc_insertion_point(field_get:roborts_decision.Referee.bonus_status)
  return bonus_status_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Referee::set_bonus_status(const ::std::string& value) {
  set_has_bonus_status();
  bonus_status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:roborts_decision.Referee.bonus_status)
}
 void Referee::set_bonus_status(const char* value) {
  set_has_bonus_status();
  bonus_status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:roborts_decision.Referee.bonus_status)
}
 void Referee::set_bonus_status(const char* value, size_t size) {
  set_has_bonus_status();
  bonus_status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:roborts_decision.Referee.bonus_status)
}
 ::std::string* Referee::mutable_bonus_status() {
  set_has_bonus_status();
  // @@protoc_insertion_point(field_mutable:roborts_decision.Referee.bonus_status)
  return bonus_status_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Referee::release_bonus_status() {
  // @@protoc_insertion_point(field_release:roborts_decision.Referee.bonus_status)
  clear_has_bonus_status();
  return bonus_status_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Referee::set_allocated_bonus_status(::std::string* bonus_status) {
  if (bonus_status != NULL) {
    set_has_bonus_status();
  } else {
    clear_has_bonus_status();
  }
  bonus_status_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bonus_status);
  // @@protoc_insertion_point(field_set_allocated:roborts_decision.Referee.bonus_status)
}

// optional string local_name = 10;
bool Referee::has_local_name() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Referee::set_has_local_name() {
  _has_bits_[0] |= 0x00000200u;
}
void Referee::clear_has_local_name() {
  _has_bits_[0] &= ~0x00000200u;
}
void Referee::clear_local_name() {
  local_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_local_name();
}
 const ::std::string& Referee::local_name() const {
  // @@protoc_insertion_point(field_get:roborts_decision.Referee.local_name)
  return local_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Referee::set_local_name(const ::std::string& value) {
  set_has_local_name();
  local_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:roborts_decision.Referee.local_name)
}
 void Referee::set_local_name(const char* value) {
  set_has_local_name();
  local_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:roborts_decision.Referee.local_name)
}
 void Referee::set_local_name(const char* value, size_t size) {
  set_has_local_name();
  local_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:roborts_decision.Referee.local_name)
}
 ::std::string* Referee::mutable_local_name() {
  set_has_local_name();
  // @@protoc_insertion_point(field_mutable:roborts_decision.Referee.local_name)
  return local_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Referee::release_local_name() {
  // @@protoc_insertion_point(field_release:roborts_decision.Referee.local_name)
  clear_has_local_name();
  return local_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Referee::set_allocated_local_name(::std::string* local_name) {
  if (local_name != NULL) {
    set_has_local_name();
  } else {
    clear_has_local_name();
  }
  local_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), local_name);
  // @@protoc_insertion_point(field_set_allocated:roborts_decision.Referee.local_name)
}

// optional string remote_name = 11;
bool Referee::has_remote_name() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void Referee::set_has_remote_name() {
  _has_bits_[0] |= 0x00000400u;
}
void Referee::clear_has_remote_name() {
  _has_bits_[0] &= ~0x00000400u;
}
void Referee::clear_remote_name() {
  remote_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_remote_name();
}
 const ::std::string& Referee::remote_name() const {
  // @@protoc_insertion_point(field_get:roborts_decision.Referee.remote_name)
  return remote_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Referee::set_remote_name(const ::std::string& value) {
  set_has_remote_name();
  remote_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:roborts_decision.Referee.remote_name)
}
 void Referee::set_remote_name(const char* value) {
  set_has_remote_name();
  remote_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:roborts_decision.Referee.remote_name)
}
 void Referee::set_remote_name(const char* value, size_t size) {
  set_has_remote_name();
  remote_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:roborts_decision.Referee.remote_name)
}
 ::std::string* Referee::mutable_remote_name() {
  set_has_remote_name();
  // @@protoc_insertion_point(field_mutable:roborts_decision.Referee.remote_name)
  return remote_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Referee::release_remote_name() {
  // @@protoc_insertion_point(field_release:roborts_decision.Referee.remote_name)
  clear_has_remote_name();
  return remote_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Referee::set_allocated_remote_name(::std::string* remote_name) {
  if (remote_name != NULL) {
    set_has_remote_name();
  } else {
    clear_has_remote_name();
  }
  remote_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), remote_name);
  // @@protoc_insertion_point(field_set_allocated:roborts_decision.Referee.remote_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TopicName::kTopicFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TopicName::TopicName()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:roborts_decision.TopicName)
}

void TopicName::InitAsDefaultInstance() {
}

TopicName::TopicName(const TopicName& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:roborts_decision.TopicName)
}

void TopicName::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TopicName::~TopicName() {
  // @@protoc_insertion_point(destructor:roborts_decision.TopicName)
  SharedDtor();
}

void TopicName::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TopicName::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TopicName::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TopicName_descriptor_;
}

const TopicName& TopicName::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_decision_2eproto();
  return *default_instance_;
}

TopicName* TopicName::default_instance_ = NULL;

TopicName* TopicName::New(::google::protobuf::Arena* arena) const {
  TopicName* n = new TopicName;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TopicName::Clear() {
// @@protoc_insertion_point(message_clear_start:roborts_decision.TopicName)
  topic_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TopicName::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:roborts_decision.TopicName)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string topic = 1;
      case 1: {
        if (tag == 10) {
         parse_topic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_topic()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->topic(this->topic_size() - 1).data(),
            this->topic(this->topic_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "roborts_decision.TopicName.topic");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_topic;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:roborts_decision.TopicName)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:roborts_decision.TopicName)
  return false;
#undef DO_
}

void TopicName::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:roborts_decision.TopicName)
  // repeated string topic = 1;
  for (int i = 0; i < this->topic_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topic(i).data(), this->topic(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "roborts_decision.TopicName.topic");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->topic(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:roborts_decision.TopicName)
}

::google::protobuf::uint8* TopicName::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:roborts_decision.TopicName)
  // repeated string topic = 1;
  for (int i = 0; i < this->topic_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topic(i).data(), this->topic(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "roborts_decision.TopicName.topic");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->topic(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:roborts_decision.TopicName)
  return target;
}

int TopicName::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:roborts_decision.TopicName)
  int total_size = 0;

  // repeated string topic = 1;
  total_size += 1 * this->topic_size();
  for (int i = 0; i < this->topic_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->topic(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TopicName::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:roborts_decision.TopicName)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TopicName* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TopicName>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:roborts_decision.TopicName)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:roborts_decision.TopicName)
    MergeFrom(*source);
  }
}

void TopicName::MergeFrom(const TopicName& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:roborts_decision.TopicName)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  topic_.MergeFrom(from.topic_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TopicName::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:roborts_decision.TopicName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TopicName::CopyFrom(const TopicName& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:roborts_decision.TopicName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TopicName::IsInitialized() const {

  return true;
}

void TopicName::Swap(TopicName* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TopicName::InternalSwap(TopicName* other) {
  topic_.UnsafeArenaSwap(&other->topic_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TopicName::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TopicName_descriptor_;
  metadata.reflection = TopicName_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TopicName

// repeated string topic = 1;
int TopicName::topic_size() const {
  return topic_.size();
}
void TopicName::clear_topic() {
  topic_.Clear();
}
 const ::std::string& TopicName::topic(int index) const {
  // @@protoc_insertion_point(field_get:roborts_decision.TopicName.topic)
  return topic_.Get(index);
}
 ::std::string* TopicName::mutable_topic(int index) {
  // @@protoc_insertion_point(field_mutable:roborts_decision.TopicName.topic)
  return topic_.Mutable(index);
}
 void TopicName::set_topic(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:roborts_decision.TopicName.topic)
  topic_.Mutable(index)->assign(value);
}
 void TopicName::set_topic(int index, const char* value) {
  topic_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:roborts_decision.TopicName.topic)
}
 void TopicName::set_topic(int index, const char* value, size_t size) {
  topic_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:roborts_decision.TopicName.topic)
}
 ::std::string* TopicName::add_topic() {
  // @@protoc_insertion_point(field_add_mutable:roborts_decision.TopicName.topic)
  return topic_.Add();
}
 void TopicName::add_topic(const ::std::string& value) {
  topic_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:roborts_decision.TopicName.topic)
}
 void TopicName::add_topic(const char* value) {
  topic_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:roborts_decision.TopicName.topic)
}
 void TopicName::add_topic(const char* value, size_t size) {
  topic_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:roborts_decision.TopicName.topic)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
TopicName::topic() const {
  // @@protoc_insertion_point(field_list:roborts_decision.TopicName.topic)
  return topic_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
TopicName::mutable_topic() {
  // @@protoc_insertion_point(field_mutable_list:roborts_decision.TopicName.topic)
  return &topic_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DecisionConfig::kPointFieldNumber;
const int DecisionConfig::kSimulateFieldNumber;
const int DecisionConfig::kMasterFieldNumber;
const int DecisionConfig::kEscapeFieldNumber;
const int DecisionConfig::kBuffPointFieldNumber;
const int DecisionConfig::kSearchPathFieldNumber;
const int DecisionConfig::kESearchPathFieldNumber;
const int DecisionConfig::kCSearchPathFieldNumber;
const int DecisionConfig::kWhirlVelFieldNumber;
const int DecisionConfig::kAuxeBotFieldNumber;
const int DecisionConfig::kMasterBotFieldNumber;
const int DecisionConfig::kWingBotTaskPointFieldNumber;
const int DecisionConfig::kWaitPointFieldNumber;
const int DecisionConfig::kSquareXFieldNumber;
const int DecisionConfig::kSquareYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DecisionConfig::DecisionConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:roborts_decision.DecisionConfig)
}

void DecisionConfig::InitAsDefaultInstance() {
  whirl_vel_ = const_cast< ::roborts_decision::WhirlVel*>(&::roborts_decision::WhirlVel::default_instance());
  wing_bot_task_point_ = const_cast< ::roborts_decision::Point*>(&::roborts_decision::Point::default_instance());
}

DecisionConfig::DecisionConfig(const DecisionConfig& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:roborts_decision.DecisionConfig)
}

void DecisionConfig::SharedCtor() {
  _cached_size_ = 0;
  simulate_ = false;
  master_ = false;
  whirl_vel_ = NULL;
  wing_bot_task_point_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DecisionConfig::~DecisionConfig() {
  // @@protoc_insertion_point(destructor:roborts_decision.DecisionConfig)
  SharedDtor();
}

void DecisionConfig::SharedDtor() {
  if (this != default_instance_) {
    delete whirl_vel_;
    delete wing_bot_task_point_;
  }
}

void DecisionConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DecisionConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DecisionConfig_descriptor_;
}

const DecisionConfig& DecisionConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_decision_2eproto();
  return *default_instance_;
}

DecisionConfig* DecisionConfig::default_instance_ = NULL;

DecisionConfig* DecisionConfig::New(::google::protobuf::Arena* arena) const {
  DecisionConfig* n = new DecisionConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DecisionConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:roborts_decision.DecisionConfig)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(DecisionConfig, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<DecisionConfig*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(simulate_, master_);
  if (_has_bits_[8 / 32] & 2304u) {
    if (has_whirl_vel()) {
      if (whirl_vel_ != NULL) whirl_vel_->::roborts_decision::WhirlVel::Clear();
    }
    if (has_wing_bot_task_point()) {
      if (wing_bot_task_point_ != NULL) wing_bot_task_point_->::roborts_decision::Point::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  point_.Clear();
  escape_.Clear();
  buff_point_.Clear();
  search_path_.Clear();
  e_search_path_.Clear();
  c_search_path_.Clear();
  auxe_bot_.Clear();
  master_bot_.Clear();
  wait_point_.Clear();
  square_x_.Clear();
  square_y_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DecisionConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:roborts_decision.DecisionConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .roborts_decision.Point point = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_point:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_point()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_point;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(16)) goto parse_simulate;
        break;
      }

      // optional bool simulate = 2 [default = false];
      case 2: {
        if (tag == 16) {
         parse_simulate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &simulate_)));
          set_has_simulate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_master;
        break;
      }

      // optional bool master = 3 [default = false];
      case 3: {
        if (tag == 24) {
         parse_master:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &master_)));
          set_has_master();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_escape;
        break;
      }

      // repeated .roborts_decision.Point escape = 4;
      case 4: {
        if (tag == 34) {
         parse_escape:
          DO_(input->IncrementRecursionDepth());
         parse_loop_escape:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_escape()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_escape;
        if (input->ExpectTag(42)) goto parse_loop_buff_point;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .roborts_decision.Point buff_point = 5;
      case 5: {
        if (tag == 42) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_buff_point:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_buff_point()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_loop_buff_point;
        if (input->ExpectTag(50)) goto parse_loop_search_path;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .roborts_decision.Point search_path = 6;
      case 6: {
        if (tag == 50) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_search_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_search_path()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_loop_search_path;
        if (input->ExpectTag(58)) goto parse_loop_e_search_path;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .roborts_decision.Point e_search_path = 7;
      case 7: {
        if (tag == 58) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_e_search_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_e_search_path()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_loop_e_search_path;
        if (input->ExpectTag(66)) goto parse_loop_c_search_path;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .roborts_decision.Point c_search_path = 8;
      case 8: {
        if (tag == 66) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_c_search_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_c_search_path()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_loop_c_search_path;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(74)) goto parse_whirl_vel;
        break;
      }

      // optional .roborts_decision.WhirlVel whirl_vel = 9;
      case 9: {
        if (tag == 74) {
         parse_whirl_vel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_whirl_vel()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_auxe_bot;
        break;
      }

      // repeated .roborts_decision.Point auxe_bot = 10;
      case 10: {
        if (tag == 82) {
         parse_auxe_bot:
          DO_(input->IncrementRecursionDepth());
         parse_loop_auxe_bot:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_auxe_bot()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_loop_auxe_bot;
        if (input->ExpectTag(90)) goto parse_loop_master_bot;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .roborts_decision.Point master_bot = 11;
      case 11: {
        if (tag == 90) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_master_bot:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_master_bot()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_loop_master_bot;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(98)) goto parse_wing_bot_task_point;
        break;
      }

      // optional .roborts_decision.Point wing_bot_task_point = 12;
      case 12: {
        if (tag == 98) {
         parse_wing_bot_task_point:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_wing_bot_task_point()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_wait_point;
        break;
      }

      // repeated .roborts_decision.Point wait_point = 13;
      case 13: {
        if (tag == 106) {
         parse_wait_point:
          DO_(input->IncrementRecursionDepth());
         parse_loop_wait_point:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_wait_point()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_loop_wait_point;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(117)) goto parse_square_x;
        break;
      }

      // repeated float square_x = 14;
      case 14: {
        if (tag == 117) {
         parse_square_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 117, input, this->mutable_square_x())));
        } else if (tag == 114) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_square_x())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(117)) goto parse_square_x;
        if (input->ExpectTag(125)) goto parse_square_y;
        break;
      }

      // repeated float square_y = 15;
      case 15: {
        if (tag == 125) {
         parse_square_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 125, input, this->mutable_square_y())));
        } else if (tag == 122) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_square_y())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(125)) goto parse_square_y;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:roborts_decision.DecisionConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:roborts_decision.DecisionConfig)
  return false;
#undef DO_
}

void DecisionConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:roborts_decision.DecisionConfig)
  // repeated .roborts_decision.Point point = 1;
  for (unsigned int i = 0, n = this->point_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->point(i), output);
  }

  // optional bool simulate = 2 [default = false];
  if (has_simulate()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->simulate(), output);
  }

  // optional bool master = 3 [default = false];
  if (has_master()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->master(), output);
  }

  // repeated .roborts_decision.Point escape = 4;
  for (unsigned int i = 0, n = this->escape_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->escape(i), output);
  }

  // repeated .roborts_decision.Point buff_point = 5;
  for (unsigned int i = 0, n = this->buff_point_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->buff_point(i), output);
  }

  // repeated .roborts_decision.Point search_path = 6;
  for (unsigned int i = 0, n = this->search_path_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->search_path(i), output);
  }

  // repeated .roborts_decision.Point e_search_path = 7;
  for (unsigned int i = 0, n = this->e_search_path_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->e_search_path(i), output);
  }

  // repeated .roborts_decision.Point c_search_path = 8;
  for (unsigned int i = 0, n = this->c_search_path_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->c_search_path(i), output);
  }

  // optional .roborts_decision.WhirlVel whirl_vel = 9;
  if (has_whirl_vel()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->whirl_vel_, output);
  }

  // repeated .roborts_decision.Point auxe_bot = 10;
  for (unsigned int i = 0, n = this->auxe_bot_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->auxe_bot(i), output);
  }

  // repeated .roborts_decision.Point master_bot = 11;
  for (unsigned int i = 0, n = this->master_bot_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->master_bot(i), output);
  }

  // optional .roborts_decision.Point wing_bot_task_point = 12;
  if (has_wing_bot_task_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->wing_bot_task_point_, output);
  }

  // repeated .roborts_decision.Point wait_point = 13;
  for (unsigned int i = 0, n = this->wait_point_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->wait_point(i), output);
  }

  // repeated float square_x = 14;
  for (int i = 0; i < this->square_x_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      14, this->square_x(i), output);
  }

  // repeated float square_y = 15;
  for (int i = 0; i < this->square_y_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      15, this->square_y(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:roborts_decision.DecisionConfig)
}

::google::protobuf::uint8* DecisionConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:roborts_decision.DecisionConfig)
  // repeated .roborts_decision.Point point = 1;
  for (unsigned int i = 0, n = this->point_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->point(i), false, target);
  }

  // optional bool simulate = 2 [default = false];
  if (has_simulate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->simulate(), target);
  }

  // optional bool master = 3 [default = false];
  if (has_master()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->master(), target);
  }

  // repeated .roborts_decision.Point escape = 4;
  for (unsigned int i = 0, n = this->escape_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->escape(i), false, target);
  }

  // repeated .roborts_decision.Point buff_point = 5;
  for (unsigned int i = 0, n = this->buff_point_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->buff_point(i), false, target);
  }

  // repeated .roborts_decision.Point search_path = 6;
  for (unsigned int i = 0, n = this->search_path_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->search_path(i), false, target);
  }

  // repeated .roborts_decision.Point e_search_path = 7;
  for (unsigned int i = 0, n = this->e_search_path_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, this->e_search_path(i), false, target);
  }

  // repeated .roborts_decision.Point c_search_path = 8;
  for (unsigned int i = 0, n = this->c_search_path_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, this->c_search_path(i), false, target);
  }

  // optional .roborts_decision.WhirlVel whirl_vel = 9;
  if (has_whirl_vel()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->whirl_vel_, false, target);
  }

  // repeated .roborts_decision.Point auxe_bot = 10;
  for (unsigned int i = 0, n = this->auxe_bot_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, this->auxe_bot(i), false, target);
  }

  // repeated .roborts_decision.Point master_bot = 11;
  for (unsigned int i = 0, n = this->master_bot_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, this->master_bot(i), false, target);
  }

  // optional .roborts_decision.Point wing_bot_task_point = 12;
  if (has_wing_bot_task_point()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *this->wing_bot_task_point_, false, target);
  }

  // repeated .roborts_decision.Point wait_point = 13;
  for (unsigned int i = 0, n = this->wait_point_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, this->wait_point(i), false, target);
  }

  // repeated float square_x = 14;
  for (int i = 0; i < this->square_x_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(14, this->square_x(i), target);
  }

  // repeated float square_y = 15;
  for (int i = 0; i < this->square_y_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(15, this->square_y(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:roborts_decision.DecisionConfig)
  return target;
}

int DecisionConfig::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:roborts_decision.DecisionConfig)
  int total_size = 0;

  if (_has_bits_[1 / 32] & 6u) {
    // optional bool simulate = 2 [default = false];
    if (has_simulate()) {
      total_size += 1 + 1;
    }

    // optional bool master = 3 [default = false];
    if (has_master()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & 2304u) {
    // optional .roborts_decision.WhirlVel whirl_vel = 9;
    if (has_whirl_vel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->whirl_vel_);
    }

    // optional .roborts_decision.Point wing_bot_task_point = 12;
    if (has_wing_bot_task_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->wing_bot_task_point_);
    }

  }
  // repeated .roborts_decision.Point point = 1;
  total_size += 1 * this->point_size();
  for (int i = 0; i < this->point_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->point(i));
  }

  // repeated .roborts_decision.Point escape = 4;
  total_size += 1 * this->escape_size();
  for (int i = 0; i < this->escape_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->escape(i));
  }

  // repeated .roborts_decision.Point buff_point = 5;
  total_size += 1 * this->buff_point_size();
  for (int i = 0; i < this->buff_point_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->buff_point(i));
  }

  // repeated .roborts_decision.Point search_path = 6;
  total_size += 1 * this->search_path_size();
  for (int i = 0; i < this->search_path_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->search_path(i));
  }

  // repeated .roborts_decision.Point e_search_path = 7;
  total_size += 1 * this->e_search_path_size();
  for (int i = 0; i < this->e_search_path_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_search_path(i));
  }

  // repeated .roborts_decision.Point c_search_path = 8;
  total_size += 1 * this->c_search_path_size();
  for (int i = 0; i < this->c_search_path_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->c_search_path(i));
  }

  // repeated .roborts_decision.Point auxe_bot = 10;
  total_size += 1 * this->auxe_bot_size();
  for (int i = 0; i < this->auxe_bot_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->auxe_bot(i));
  }

  // repeated .roborts_decision.Point master_bot = 11;
  total_size += 1 * this->master_bot_size();
  for (int i = 0; i < this->master_bot_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->master_bot(i));
  }

  // repeated .roborts_decision.Point wait_point = 13;
  total_size += 1 * this->wait_point_size();
  for (int i = 0; i < this->wait_point_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->wait_point(i));
  }

  // repeated float square_x = 14;
  {
    int data_size = 0;
    data_size = 4 * this->square_x_size();
    total_size += 1 * this->square_x_size() + data_size;
  }

  // repeated float square_y = 15;
  {
    int data_size = 0;
    data_size = 4 * this->square_y_size();
    total_size += 1 * this->square_y_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DecisionConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:roborts_decision.DecisionConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DecisionConfig* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DecisionConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:roborts_decision.DecisionConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:roborts_decision.DecisionConfig)
    MergeFrom(*source);
  }
}

void DecisionConfig::MergeFrom(const DecisionConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:roborts_decision.DecisionConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  point_.MergeFrom(from.point_);
  escape_.MergeFrom(from.escape_);
  buff_point_.MergeFrom(from.buff_point_);
  search_path_.MergeFrom(from.search_path_);
  e_search_path_.MergeFrom(from.e_search_path_);
  c_search_path_.MergeFrom(from.c_search_path_);
  auxe_bot_.MergeFrom(from.auxe_bot_);
  master_bot_.MergeFrom(from.master_bot_);
  wait_point_.MergeFrom(from.wait_point_);
  square_x_.MergeFrom(from.square_x_);
  square_y_.MergeFrom(from.square_y_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_simulate()) {
      set_simulate(from.simulate());
    }
    if (from.has_master()) {
      set_master(from.master());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_whirl_vel()) {
      mutable_whirl_vel()->::roborts_decision::WhirlVel::MergeFrom(from.whirl_vel());
    }
    if (from.has_wing_bot_task_point()) {
      mutable_wing_bot_task_point()->::roborts_decision::Point::MergeFrom(from.wing_bot_task_point());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void DecisionConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:roborts_decision.DecisionConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DecisionConfig::CopyFrom(const DecisionConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:roborts_decision.DecisionConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DecisionConfig::IsInitialized() const {

  return true;
}

void DecisionConfig::Swap(DecisionConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DecisionConfig::InternalSwap(DecisionConfig* other) {
  point_.UnsafeArenaSwap(&other->point_);
  std::swap(simulate_, other->simulate_);
  std::swap(master_, other->master_);
  escape_.UnsafeArenaSwap(&other->escape_);
  buff_point_.UnsafeArenaSwap(&other->buff_point_);
  search_path_.UnsafeArenaSwap(&other->search_path_);
  e_search_path_.UnsafeArenaSwap(&other->e_search_path_);
  c_search_path_.UnsafeArenaSwap(&other->c_search_path_);
  std::swap(whirl_vel_, other->whirl_vel_);
  auxe_bot_.UnsafeArenaSwap(&other->auxe_bot_);
  master_bot_.UnsafeArenaSwap(&other->master_bot_);
  std::swap(wing_bot_task_point_, other->wing_bot_task_point_);
  wait_point_.UnsafeArenaSwap(&other->wait_point_);
  square_x_.UnsafeArenaSwap(&other->square_x_);
  square_y_.UnsafeArenaSwap(&other->square_y_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DecisionConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DecisionConfig_descriptor_;
  metadata.reflection = DecisionConfig_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DecisionConfig

// repeated .roborts_decision.Point point = 1;
int DecisionConfig::point_size() const {
  return point_.size();
}
void DecisionConfig::clear_point() {
  point_.Clear();
}
const ::roborts_decision::Point& DecisionConfig::point(int index) const {
  // @@protoc_insertion_point(field_get:roborts_decision.DecisionConfig.point)
  return point_.Get(index);
}
::roborts_decision::Point* DecisionConfig::mutable_point(int index) {
  // @@protoc_insertion_point(field_mutable:roborts_decision.DecisionConfig.point)
  return point_.Mutable(index);
}
::roborts_decision::Point* DecisionConfig::add_point() {
  // @@protoc_insertion_point(field_add:roborts_decision.DecisionConfig.point)
  return point_.Add();
}
::google::protobuf::RepeatedPtrField< ::roborts_decision::Point >*
DecisionConfig::mutable_point() {
  // @@protoc_insertion_point(field_mutable_list:roborts_decision.DecisionConfig.point)
  return &point_;
}
const ::google::protobuf::RepeatedPtrField< ::roborts_decision::Point >&
DecisionConfig::point() const {
  // @@protoc_insertion_point(field_list:roborts_decision.DecisionConfig.point)
  return point_;
}

// optional bool simulate = 2 [default = false];
bool DecisionConfig::has_simulate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DecisionConfig::set_has_simulate() {
  _has_bits_[0] |= 0x00000002u;
}
void DecisionConfig::clear_has_simulate() {
  _has_bits_[0] &= ~0x00000002u;
}
void DecisionConfig::clear_simulate() {
  simulate_ = false;
  clear_has_simulate();
}
 bool DecisionConfig::simulate() const {
  // @@protoc_insertion_point(field_get:roborts_decision.DecisionConfig.simulate)
  return simulate_;
}
 void DecisionConfig::set_simulate(bool value) {
  set_has_simulate();
  simulate_ = value;
  // @@protoc_insertion_point(field_set:roborts_decision.DecisionConfig.simulate)
}

// optional bool master = 3 [default = false];
bool DecisionConfig::has_master() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DecisionConfig::set_has_master() {
  _has_bits_[0] |= 0x00000004u;
}
void DecisionConfig::clear_has_master() {
  _has_bits_[0] &= ~0x00000004u;
}
void DecisionConfig::clear_master() {
  master_ = false;
  clear_has_master();
}
 bool DecisionConfig::master() const {
  // @@protoc_insertion_point(field_get:roborts_decision.DecisionConfig.master)
  return master_;
}
 void DecisionConfig::set_master(bool value) {
  set_has_master();
  master_ = value;
  // @@protoc_insertion_point(field_set:roborts_decision.DecisionConfig.master)
}

// repeated .roborts_decision.Point escape = 4;
int DecisionConfig::escape_size() const {
  return escape_.size();
}
void DecisionConfig::clear_escape() {
  escape_.Clear();
}
const ::roborts_decision::Point& DecisionConfig::escape(int index) const {
  // @@protoc_insertion_point(field_get:roborts_decision.DecisionConfig.escape)
  return escape_.Get(index);
}
::roborts_decision::Point* DecisionConfig::mutable_escape(int index) {
  // @@protoc_insertion_point(field_mutable:roborts_decision.DecisionConfig.escape)
  return escape_.Mutable(index);
}
::roborts_decision::Point* DecisionConfig::add_escape() {
  // @@protoc_insertion_point(field_add:roborts_decision.DecisionConfig.escape)
  return escape_.Add();
}
::google::protobuf::RepeatedPtrField< ::roborts_decision::Point >*
DecisionConfig::mutable_escape() {
  // @@protoc_insertion_point(field_mutable_list:roborts_decision.DecisionConfig.escape)
  return &escape_;
}
const ::google::protobuf::RepeatedPtrField< ::roborts_decision::Point >&
DecisionConfig::escape() const {
  // @@protoc_insertion_point(field_list:roborts_decision.DecisionConfig.escape)
  return escape_;
}

// repeated .roborts_decision.Point buff_point = 5;
int DecisionConfig::buff_point_size() const {
  return buff_point_.size();
}
void DecisionConfig::clear_buff_point() {
  buff_point_.Clear();
}
const ::roborts_decision::Point& DecisionConfig::buff_point(int index) const {
  // @@protoc_insertion_point(field_get:roborts_decision.DecisionConfig.buff_point)
  return buff_point_.Get(index);
}
::roborts_decision::Point* DecisionConfig::mutable_buff_point(int index) {
  // @@protoc_insertion_point(field_mutable:roborts_decision.DecisionConfig.buff_point)
  return buff_point_.Mutable(index);
}
::roborts_decision::Point* DecisionConfig::add_buff_point() {
  // @@protoc_insertion_point(field_add:roborts_decision.DecisionConfig.buff_point)
  return buff_point_.Add();
}
::google::protobuf::RepeatedPtrField< ::roborts_decision::Point >*
DecisionConfig::mutable_buff_point() {
  // @@protoc_insertion_point(field_mutable_list:roborts_decision.DecisionConfig.buff_point)
  return &buff_point_;
}
const ::google::protobuf::RepeatedPtrField< ::roborts_decision::Point >&
DecisionConfig::buff_point() const {
  // @@protoc_insertion_point(field_list:roborts_decision.DecisionConfig.buff_point)
  return buff_point_;
}

// repeated .roborts_decision.Point search_path = 6;
int DecisionConfig::search_path_size() const {
  return search_path_.size();
}
void DecisionConfig::clear_search_path() {
  search_path_.Clear();
}
const ::roborts_decision::Point& DecisionConfig::search_path(int index) const {
  // @@protoc_insertion_point(field_get:roborts_decision.DecisionConfig.search_path)
  return search_path_.Get(index);
}
::roborts_decision::Point* DecisionConfig::mutable_search_path(int index) {
  // @@protoc_insertion_point(field_mutable:roborts_decision.DecisionConfig.search_path)
  return search_path_.Mutable(index);
}
::roborts_decision::Point* DecisionConfig::add_search_path() {
  // @@protoc_insertion_point(field_add:roborts_decision.DecisionConfig.search_path)
  return search_path_.Add();
}
::google::protobuf::RepeatedPtrField< ::roborts_decision::Point >*
DecisionConfig::mutable_search_path() {
  // @@protoc_insertion_point(field_mutable_list:roborts_decision.DecisionConfig.search_path)
  return &search_path_;
}
const ::google::protobuf::RepeatedPtrField< ::roborts_decision::Point >&
DecisionConfig::search_path() const {
  // @@protoc_insertion_point(field_list:roborts_decision.DecisionConfig.search_path)
  return search_path_;
}

// repeated .roborts_decision.Point e_search_path = 7;
int DecisionConfig::e_search_path_size() const {
  return e_search_path_.size();
}
void DecisionConfig::clear_e_search_path() {
  e_search_path_.Clear();
}
const ::roborts_decision::Point& DecisionConfig::e_search_path(int index) const {
  // @@protoc_insertion_point(field_get:roborts_decision.DecisionConfig.e_search_path)
  return e_search_path_.Get(index);
}
::roborts_decision::Point* DecisionConfig::mutable_e_search_path(int index) {
  // @@protoc_insertion_point(field_mutable:roborts_decision.DecisionConfig.e_search_path)
  return e_search_path_.Mutable(index);
}
::roborts_decision::Point* DecisionConfig::add_e_search_path() {
  // @@protoc_insertion_point(field_add:roborts_decision.DecisionConfig.e_search_path)
  return e_search_path_.Add();
}
::google::protobuf::RepeatedPtrField< ::roborts_decision::Point >*
DecisionConfig::mutable_e_search_path() {
  // @@protoc_insertion_point(field_mutable_list:roborts_decision.DecisionConfig.e_search_path)
  return &e_search_path_;
}
const ::google::protobuf::RepeatedPtrField< ::roborts_decision::Point >&
DecisionConfig::e_search_path() const {
  // @@protoc_insertion_point(field_list:roborts_decision.DecisionConfig.e_search_path)
  return e_search_path_;
}

// repeated .roborts_decision.Point c_search_path = 8;
int DecisionConfig::c_search_path_size() const {
  return c_search_path_.size();
}
void DecisionConfig::clear_c_search_path() {
  c_search_path_.Clear();
}
const ::roborts_decision::Point& DecisionConfig::c_search_path(int index) const {
  // @@protoc_insertion_point(field_get:roborts_decision.DecisionConfig.c_search_path)
  return c_search_path_.Get(index);
}
::roborts_decision::Point* DecisionConfig::mutable_c_search_path(int index) {
  // @@protoc_insertion_point(field_mutable:roborts_decision.DecisionConfig.c_search_path)
  return c_search_path_.Mutable(index);
}
::roborts_decision::Point* DecisionConfig::add_c_search_path() {
  // @@protoc_insertion_point(field_add:roborts_decision.DecisionConfig.c_search_path)
  return c_search_path_.Add();
}
::google::protobuf::RepeatedPtrField< ::roborts_decision::Point >*
DecisionConfig::mutable_c_search_path() {
  // @@protoc_insertion_point(field_mutable_list:roborts_decision.DecisionConfig.c_search_path)
  return &c_search_path_;
}
const ::google::protobuf::RepeatedPtrField< ::roborts_decision::Point >&
DecisionConfig::c_search_path() const {
  // @@protoc_insertion_point(field_list:roborts_decision.DecisionConfig.c_search_path)
  return c_search_path_;
}

// optional .roborts_decision.WhirlVel whirl_vel = 9;
bool DecisionConfig::has_whirl_vel() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void DecisionConfig::set_has_whirl_vel() {
  _has_bits_[0] |= 0x00000100u;
}
void DecisionConfig::clear_has_whirl_vel() {
  _has_bits_[0] &= ~0x00000100u;
}
void DecisionConfig::clear_whirl_vel() {
  if (whirl_vel_ != NULL) whirl_vel_->::roborts_decision::WhirlVel::Clear();
  clear_has_whirl_vel();
}
const ::roborts_decision::WhirlVel& DecisionConfig::whirl_vel() const {
  // @@protoc_insertion_point(field_get:roborts_decision.DecisionConfig.whirl_vel)
  return whirl_vel_ != NULL ? *whirl_vel_ : *default_instance_->whirl_vel_;
}
::roborts_decision::WhirlVel* DecisionConfig::mutable_whirl_vel() {
  set_has_whirl_vel();
  if (whirl_vel_ == NULL) {
    whirl_vel_ = new ::roborts_decision::WhirlVel;
  }
  // @@protoc_insertion_point(field_mutable:roborts_decision.DecisionConfig.whirl_vel)
  return whirl_vel_;
}
::roborts_decision::WhirlVel* DecisionConfig::release_whirl_vel() {
  // @@protoc_insertion_point(field_release:roborts_decision.DecisionConfig.whirl_vel)
  clear_has_whirl_vel();
  ::roborts_decision::WhirlVel* temp = whirl_vel_;
  whirl_vel_ = NULL;
  return temp;
}
void DecisionConfig::set_allocated_whirl_vel(::roborts_decision::WhirlVel* whirl_vel) {
  delete whirl_vel_;
  whirl_vel_ = whirl_vel;
  if (whirl_vel) {
    set_has_whirl_vel();
  } else {
    clear_has_whirl_vel();
  }
  // @@protoc_insertion_point(field_set_allocated:roborts_decision.DecisionConfig.whirl_vel)
}

// repeated .roborts_decision.Point auxe_bot = 10;
int DecisionConfig::auxe_bot_size() const {
  return auxe_bot_.size();
}
void DecisionConfig::clear_auxe_bot() {
  auxe_bot_.Clear();
}
const ::roborts_decision::Point& DecisionConfig::auxe_bot(int index) const {
  // @@protoc_insertion_point(field_get:roborts_decision.DecisionConfig.auxe_bot)
  return auxe_bot_.Get(index);
}
::roborts_decision::Point* DecisionConfig::mutable_auxe_bot(int index) {
  // @@protoc_insertion_point(field_mutable:roborts_decision.DecisionConfig.auxe_bot)
  return auxe_bot_.Mutable(index);
}
::roborts_decision::Point* DecisionConfig::add_auxe_bot() {
  // @@protoc_insertion_point(field_add:roborts_decision.DecisionConfig.auxe_bot)
  return auxe_bot_.Add();
}
::google::protobuf::RepeatedPtrField< ::roborts_decision::Point >*
DecisionConfig::mutable_auxe_bot() {
  // @@protoc_insertion_point(field_mutable_list:roborts_decision.DecisionConfig.auxe_bot)
  return &auxe_bot_;
}
const ::google::protobuf::RepeatedPtrField< ::roborts_decision::Point >&
DecisionConfig::auxe_bot() const {
  // @@protoc_insertion_point(field_list:roborts_decision.DecisionConfig.auxe_bot)
  return auxe_bot_;
}

// repeated .roborts_decision.Point master_bot = 11;
int DecisionConfig::master_bot_size() const {
  return master_bot_.size();
}
void DecisionConfig::clear_master_bot() {
  master_bot_.Clear();
}
const ::roborts_decision::Point& DecisionConfig::master_bot(int index) const {
  // @@protoc_insertion_point(field_get:roborts_decision.DecisionConfig.master_bot)
  return master_bot_.Get(index);
}
::roborts_decision::Point* DecisionConfig::mutable_master_bot(int index) {
  // @@protoc_insertion_point(field_mutable:roborts_decision.DecisionConfig.master_bot)
  return master_bot_.Mutable(index);
}
::roborts_decision::Point* DecisionConfig::add_master_bot() {
  // @@protoc_insertion_point(field_add:roborts_decision.DecisionConfig.master_bot)
  return master_bot_.Add();
}
::google::protobuf::RepeatedPtrField< ::roborts_decision::Point >*
DecisionConfig::mutable_master_bot() {
  // @@protoc_insertion_point(field_mutable_list:roborts_decision.DecisionConfig.master_bot)
  return &master_bot_;
}
const ::google::protobuf::RepeatedPtrField< ::roborts_decision::Point >&
DecisionConfig::master_bot() const {
  // @@protoc_insertion_point(field_list:roborts_decision.DecisionConfig.master_bot)
  return master_bot_;
}

// optional .roborts_decision.Point wing_bot_task_point = 12;
bool DecisionConfig::has_wing_bot_task_point() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void DecisionConfig::set_has_wing_bot_task_point() {
  _has_bits_[0] |= 0x00000800u;
}
void DecisionConfig::clear_has_wing_bot_task_point() {
  _has_bits_[0] &= ~0x00000800u;
}
void DecisionConfig::clear_wing_bot_task_point() {
  if (wing_bot_task_point_ != NULL) wing_bot_task_point_->::roborts_decision::Point::Clear();
  clear_has_wing_bot_task_point();
}
const ::roborts_decision::Point& DecisionConfig::wing_bot_task_point() const {
  // @@protoc_insertion_point(field_get:roborts_decision.DecisionConfig.wing_bot_task_point)
  return wing_bot_task_point_ != NULL ? *wing_bot_task_point_ : *default_instance_->wing_bot_task_point_;
}
::roborts_decision::Point* DecisionConfig::mutable_wing_bot_task_point() {
  set_has_wing_bot_task_point();
  if (wing_bot_task_point_ == NULL) {
    wing_bot_task_point_ = new ::roborts_decision::Point;
  }
  // @@protoc_insertion_point(field_mutable:roborts_decision.DecisionConfig.wing_bot_task_point)
  return wing_bot_task_point_;
}
::roborts_decision::Point* DecisionConfig::release_wing_bot_task_point() {
  // @@protoc_insertion_point(field_release:roborts_decision.DecisionConfig.wing_bot_task_point)
  clear_has_wing_bot_task_point();
  ::roborts_decision::Point* temp = wing_bot_task_point_;
  wing_bot_task_point_ = NULL;
  return temp;
}
void DecisionConfig::set_allocated_wing_bot_task_point(::roborts_decision::Point* wing_bot_task_point) {
  delete wing_bot_task_point_;
  wing_bot_task_point_ = wing_bot_task_point;
  if (wing_bot_task_point) {
    set_has_wing_bot_task_point();
  } else {
    clear_has_wing_bot_task_point();
  }
  // @@protoc_insertion_point(field_set_allocated:roborts_decision.DecisionConfig.wing_bot_task_point)
}

// repeated .roborts_decision.Point wait_point = 13;
int DecisionConfig::wait_point_size() const {
  return wait_point_.size();
}
void DecisionConfig::clear_wait_point() {
  wait_point_.Clear();
}
const ::roborts_decision::Point& DecisionConfig::wait_point(int index) const {
  // @@protoc_insertion_point(field_get:roborts_decision.DecisionConfig.wait_point)
  return wait_point_.Get(index);
}
::roborts_decision::Point* DecisionConfig::mutable_wait_point(int index) {
  // @@protoc_insertion_point(field_mutable:roborts_decision.DecisionConfig.wait_point)
  return wait_point_.Mutable(index);
}
::roborts_decision::Point* DecisionConfig::add_wait_point() {
  // @@protoc_insertion_point(field_add:roborts_decision.DecisionConfig.wait_point)
  return wait_point_.Add();
}
::google::protobuf::RepeatedPtrField< ::roborts_decision::Point >*
DecisionConfig::mutable_wait_point() {
  // @@protoc_insertion_point(field_mutable_list:roborts_decision.DecisionConfig.wait_point)
  return &wait_point_;
}
const ::google::protobuf::RepeatedPtrField< ::roborts_decision::Point >&
DecisionConfig::wait_point() const {
  // @@protoc_insertion_point(field_list:roborts_decision.DecisionConfig.wait_point)
  return wait_point_;
}

// repeated float square_x = 14;
int DecisionConfig::square_x_size() const {
  return square_x_.size();
}
void DecisionConfig::clear_square_x() {
  square_x_.Clear();
}
 float DecisionConfig::square_x(int index) const {
  // @@protoc_insertion_point(field_get:roborts_decision.DecisionConfig.square_x)
  return square_x_.Get(index);
}
 void DecisionConfig::set_square_x(int index, float value) {
  square_x_.Set(index, value);
  // @@protoc_insertion_point(field_set:roborts_decision.DecisionConfig.square_x)
}
 void DecisionConfig::add_square_x(float value) {
  square_x_.Add(value);
  // @@protoc_insertion_point(field_add:roborts_decision.DecisionConfig.square_x)
}
 const ::google::protobuf::RepeatedField< float >&
DecisionConfig::square_x() const {
  // @@protoc_insertion_point(field_list:roborts_decision.DecisionConfig.square_x)
  return square_x_;
}
 ::google::protobuf::RepeatedField< float >*
DecisionConfig::mutable_square_x() {
  // @@protoc_insertion_point(field_mutable_list:roborts_decision.DecisionConfig.square_x)
  return &square_x_;
}

// repeated float square_y = 15;
int DecisionConfig::square_y_size() const {
  return square_y_.size();
}
void DecisionConfig::clear_square_y() {
  square_y_.Clear();
}
 float DecisionConfig::square_y(int index) const {
  // @@protoc_insertion_point(field_get:roborts_decision.DecisionConfig.square_y)
  return square_y_.Get(index);
}
 void DecisionConfig::set_square_y(int index, float value) {
  square_y_.Set(index, value);
  // @@protoc_insertion_point(field_set:roborts_decision.DecisionConfig.square_y)
}
 void DecisionConfig::add_square_y(float value) {
  square_y_.Add(value);
  // @@protoc_insertion_point(field_add:roborts_decision.DecisionConfig.square_y)
}
 const ::google::protobuf::RepeatedField< float >&
DecisionConfig::square_y() const {
  // @@protoc_insertion_point(field_list:roborts_decision.DecisionConfig.square_y)
  return square_y_;
}
 ::google::protobuf::RepeatedField< float >*
DecisionConfig::mutable_square_y() {
  // @@protoc_insertion_point(field_mutable_list:roborts_decision.DecisionConfig.square_y)
  return &square_y_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RobotInfo::kHpFieldNumber;
const int RobotInfo::kHeatFieldNumber;
const int RobotInfo::kBulletsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RobotInfo::RobotInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:roborts_decision.RobotInfo)
}

void RobotInfo::InitAsDefaultInstance() {
}

RobotInfo::RobotInfo(const RobotInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:roborts_decision.RobotInfo)
}

void RobotInfo::SharedCtor() {
  _cached_size_ = 0;
  hp_ = 0;
  heat_ = 0;
  bullets_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RobotInfo::~RobotInfo() {
  // @@protoc_insertion_point(destructor:roborts_decision.RobotInfo)
  SharedDtor();
}

void RobotInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RobotInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RobotInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RobotInfo_descriptor_;
}

const RobotInfo& RobotInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_decision_2eproto();
  return *default_instance_;
}

RobotInfo* RobotInfo::default_instance_ = NULL;

RobotInfo* RobotInfo::New(::google::protobuf::Arena* arena) const {
  RobotInfo* n = new RobotInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RobotInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:roborts_decision.RobotInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(RobotInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<RobotInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(hp_, bullets_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RobotInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:roborts_decision.RobotInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 hp = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_heat;
        break;
      }

      // optional int32 heat = 2;
      case 2: {
        if (tag == 16) {
         parse_heat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &heat_)));
          set_has_heat();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_bullets;
        break;
      }

      // optional int32 bullets = 3;
      case 3: {
        if (tag == 24) {
         parse_bullets:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bullets_)));
          set_has_bullets();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:roborts_decision.RobotInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:roborts_decision.RobotInfo)
  return false;
#undef DO_
}

void RobotInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:roborts_decision.RobotInfo)
  // optional int32 hp = 1;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->hp(), output);
  }

  // optional int32 heat = 2;
  if (has_heat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->heat(), output);
  }

  // optional int32 bullets = 3;
  if (has_bullets()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->bullets(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:roborts_decision.RobotInfo)
}

::google::protobuf::uint8* RobotInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:roborts_decision.RobotInfo)
  // optional int32 hp = 1;
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->hp(), target);
  }

  // optional int32 heat = 2;
  if (has_heat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->heat(), target);
  }

  // optional int32 bullets = 3;
  if (has_bullets()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->bullets(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:roborts_decision.RobotInfo)
  return target;
}

int RobotInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:roborts_decision.RobotInfo)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional int32 hp = 1;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hp());
    }

    // optional int32 heat = 2;
    if (has_heat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->heat());
    }

    // optional int32 bullets = 3;
    if (has_bullets()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bullets());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RobotInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:roborts_decision.RobotInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RobotInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RobotInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:roborts_decision.RobotInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:roborts_decision.RobotInfo)
    MergeFrom(*source);
  }
}

void RobotInfo::MergeFrom(const RobotInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:roborts_decision.RobotInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hp()) {
      set_hp(from.hp());
    }
    if (from.has_heat()) {
      set_heat(from.heat());
    }
    if (from.has_bullets()) {
      set_bullets(from.bullets());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RobotInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:roborts_decision.RobotInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RobotInfo::CopyFrom(const RobotInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:roborts_decision.RobotInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RobotInfo::IsInitialized() const {

  return true;
}

void RobotInfo::Swap(RobotInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RobotInfo::InternalSwap(RobotInfo* other) {
  std::swap(hp_, other->hp_);
  std::swap(heat_, other->heat_);
  std::swap(bullets_, other->bullets_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RobotInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RobotInfo_descriptor_;
  metadata.reflection = RobotInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RobotInfo

// optional int32 hp = 1;
bool RobotInfo::has_hp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RobotInfo::set_has_hp() {
  _has_bits_[0] |= 0x00000001u;
}
void RobotInfo::clear_has_hp() {
  _has_bits_[0] &= ~0x00000001u;
}
void RobotInfo::clear_hp() {
  hp_ = 0;
  clear_has_hp();
}
 ::google::protobuf::int32 RobotInfo::hp() const {
  // @@protoc_insertion_point(field_get:roborts_decision.RobotInfo.hp)
  return hp_;
}
 void RobotInfo::set_hp(::google::protobuf::int32 value) {
  set_has_hp();
  hp_ = value;
  // @@protoc_insertion_point(field_set:roborts_decision.RobotInfo.hp)
}

// optional int32 heat = 2;
bool RobotInfo::has_heat() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RobotInfo::set_has_heat() {
  _has_bits_[0] |= 0x00000002u;
}
void RobotInfo::clear_has_heat() {
  _has_bits_[0] &= ~0x00000002u;
}
void RobotInfo::clear_heat() {
  heat_ = 0;
  clear_has_heat();
}
 ::google::protobuf::int32 RobotInfo::heat() const {
  // @@protoc_insertion_point(field_get:roborts_decision.RobotInfo.heat)
  return heat_;
}
 void RobotInfo::set_heat(::google::protobuf::int32 value) {
  set_has_heat();
  heat_ = value;
  // @@protoc_insertion_point(field_set:roborts_decision.RobotInfo.heat)
}

// optional int32 bullets = 3;
bool RobotInfo::has_bullets() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RobotInfo::set_has_bullets() {
  _has_bits_[0] |= 0x00000004u;
}
void RobotInfo::clear_has_bullets() {
  _has_bits_[0] &= ~0x00000004u;
}
void RobotInfo::clear_bullets() {
  bullets_ = 0;
  clear_has_bullets();
}
 ::google::protobuf::int32 RobotInfo::bullets() const {
  // @@protoc_insertion_point(field_get:roborts_decision.RobotInfo.bullets)
  return bullets_;
}
 void RobotInfo::set_bullets(::google::protobuf::int32 value) {
  set_has_bullets();
  bullets_ = value;
  // @@protoc_insertion_point(field_set:roborts_decision.RobotInfo.bullets)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PunishInfo::kOnGimbalFieldNumber;
const int PunishInfo::kOnChassisFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PunishInfo::PunishInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:roborts_decision.PunishInfo)
}

void PunishInfo::InitAsDefaultInstance() {
}

PunishInfo::PunishInfo(const PunishInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:roborts_decision.PunishInfo)
}

void PunishInfo::SharedCtor() {
  _cached_size_ = 0;
  on_gimbal_ = false;
  on_chassis_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PunishInfo::~PunishInfo() {
  // @@protoc_insertion_point(destructor:roborts_decision.PunishInfo)
  SharedDtor();
}

void PunishInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PunishInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PunishInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PunishInfo_descriptor_;
}

const PunishInfo& PunishInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_decision_2eproto();
  return *default_instance_;
}

PunishInfo* PunishInfo::default_instance_ = NULL;

PunishInfo* PunishInfo::New(::google::protobuf::Arena* arena) const {
  PunishInfo* n = new PunishInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PunishInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:roborts_decision.PunishInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(PunishInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PunishInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(on_gimbal_, on_chassis_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PunishInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:roborts_decision.PunishInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool on_gimbal = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &on_gimbal_)));
          set_has_on_gimbal();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_on_chassis;
        break;
      }

      // optional bool on_chassis = 2;
      case 2: {
        if (tag == 16) {
         parse_on_chassis:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &on_chassis_)));
          set_has_on_chassis();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:roborts_decision.PunishInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:roborts_decision.PunishInfo)
  return false;
#undef DO_
}

void PunishInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:roborts_decision.PunishInfo)
  // optional bool on_gimbal = 1;
  if (has_on_gimbal()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->on_gimbal(), output);
  }

  // optional bool on_chassis = 2;
  if (has_on_chassis()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->on_chassis(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:roborts_decision.PunishInfo)
}

::google::protobuf::uint8* PunishInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:roborts_decision.PunishInfo)
  // optional bool on_gimbal = 1;
  if (has_on_gimbal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->on_gimbal(), target);
  }

  // optional bool on_chassis = 2;
  if (has_on_chassis()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->on_chassis(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:roborts_decision.PunishInfo)
  return target;
}

int PunishInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:roborts_decision.PunishInfo)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional bool on_gimbal = 1;
    if (has_on_gimbal()) {
      total_size += 1 + 1;
    }

    // optional bool on_chassis = 2;
    if (has_on_chassis()) {
      total_size += 1 + 1;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PunishInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:roborts_decision.PunishInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PunishInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PunishInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:roborts_decision.PunishInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:roborts_decision.PunishInfo)
    MergeFrom(*source);
  }
}

void PunishInfo::MergeFrom(const PunishInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:roborts_decision.PunishInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_on_gimbal()) {
      set_on_gimbal(from.on_gimbal());
    }
    if (from.has_on_chassis()) {
      set_on_chassis(from.on_chassis());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void PunishInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:roborts_decision.PunishInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PunishInfo::CopyFrom(const PunishInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:roborts_decision.PunishInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PunishInfo::IsInitialized() const {

  return true;
}

void PunishInfo::Swap(PunishInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PunishInfo::InternalSwap(PunishInfo* other) {
  std::swap(on_gimbal_, other->on_gimbal_);
  std::swap(on_chassis_, other->on_chassis_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PunishInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PunishInfo_descriptor_;
  metadata.reflection = PunishInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PunishInfo

// optional bool on_gimbal = 1;
bool PunishInfo::has_on_gimbal() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PunishInfo::set_has_on_gimbal() {
  _has_bits_[0] |= 0x00000001u;
}
void PunishInfo::clear_has_on_gimbal() {
  _has_bits_[0] &= ~0x00000001u;
}
void PunishInfo::clear_on_gimbal() {
  on_gimbal_ = false;
  clear_has_on_gimbal();
}
 bool PunishInfo::on_gimbal() const {
  // @@protoc_insertion_point(field_get:roborts_decision.PunishInfo.on_gimbal)
  return on_gimbal_;
}
 void PunishInfo::set_on_gimbal(bool value) {
  set_has_on_gimbal();
  on_gimbal_ = value;
  // @@protoc_insertion_point(field_set:roborts_decision.PunishInfo.on_gimbal)
}

// optional bool on_chassis = 2;
bool PunishInfo::has_on_chassis() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PunishInfo::set_has_on_chassis() {
  _has_bits_[0] |= 0x00000002u;
}
void PunishInfo::clear_has_on_chassis() {
  _has_bits_[0] &= ~0x00000002u;
}
void PunishInfo::clear_on_chassis() {
  on_chassis_ = false;
  clear_has_on_chassis();
}
 bool PunishInfo::on_chassis() const {
  // @@protoc_insertion_point(field_get:roborts_decision.PunishInfo.on_chassis)
  return on_chassis_;
}
 void PunishInfo::set_on_chassis(bool value) {
  set_has_on_chassis();
  on_chassis_ = value;
  // @@protoc_insertion_point(field_set:roborts_decision.PunishInfo.on_chassis)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* Status_RunStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Status_RunStatus_descriptor_;
}
bool Status_RunStatus_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Status_RunStatus Status::CHASE;
const Status_RunStatus Status::ESCAPE;
const Status_RunStatus Status::BUFF;
const Status_RunStatus Status::SHOOT;
const Status_RunStatus Status::RunStatus_MIN;
const Status_RunStatus Status::RunStatus_MAX;
const int Status::RunStatus_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Status::kIsRunningFieldNumber;
const int Status::kStatusFieldNumber;
const int Status::kPositionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Status::Status()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:roborts_decision.Status)
}

void Status::InitAsDefaultInstance() {
  position_ = const_cast< ::roborts_decision::Point*>(&::roborts_decision::Point::default_instance());
}

Status::Status(const Status& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:roborts_decision.Status)
}

void Status::SharedCtor() {
  _cached_size_ = 0;
  is_running_ = false;
  status_ = 1;
  position_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Status::~Status() {
  // @@protoc_insertion_point(destructor:roborts_decision.Status)
  SharedDtor();
}

void Status::SharedDtor() {
  if (this != default_instance_) {
    delete position_;
  }
}

void Status::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Status::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Status_descriptor_;
}

const Status& Status::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_decision_2eproto();
  return *default_instance_;
}

Status* Status::default_instance_ = NULL;

Status* Status::New(::google::protobuf::Arena* arena) const {
  Status* n = new Status;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Status::Clear() {
// @@protoc_insertion_point(message_clear_start:roborts_decision.Status)
  if (_has_bits_[0 / 32] & 7u) {
    is_running_ = false;
    status_ = 1;
    if (has_position()) {
      if (position_ != NULL) position_->::roborts_decision::Point::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Status::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:roborts_decision.Status)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool is_running = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_running_)));
          set_has_is_running();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // optional .roborts_decision.Status.RunStatus status = 2;
      case 2: {
        if (tag == 16) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::roborts_decision::Status_RunStatus_IsValid(value)) {
            set_status(static_cast< ::roborts_decision::Status_RunStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_position;
        break;
      }

      // optional .roborts_decision.Point position = 3;
      case 3: {
        if (tag == 26) {
         parse_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:roborts_decision.Status)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:roborts_decision.Status)
  return false;
#undef DO_
}

void Status::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:roborts_decision.Status)
  // required bool is_running = 1;
  if (has_is_running()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_running(), output);
  }

  // optional .roborts_decision.Status.RunStatus status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  // optional .roborts_decision.Point position = 3;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->position_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:roborts_decision.Status)
}

::google::protobuf::uint8* Status::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:roborts_decision.Status)
  // required bool is_running = 1;
  if (has_is_running()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_running(), target);
  }

  // optional .roborts_decision.Status.RunStatus status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->status(), target);
  }

  // optional .roborts_decision.Point position = 3;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->position_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:roborts_decision.Status)
  return target;
}

int Status::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:roborts_decision.Status)
  int total_size = 0;

  // required bool is_running = 1;
  if (has_is_running()) {
    total_size += 1 + 1;
  }
  if (_has_bits_[1 / 32] & 6u) {
    // optional .roborts_decision.Status.RunStatus status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // optional .roborts_decision.Point position = 3;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->position_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Status::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:roborts_decision.Status)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Status* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Status>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:roborts_decision.Status)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:roborts_decision.Status)
    MergeFrom(*source);
  }
}

void Status::MergeFrom(const Status& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:roborts_decision.Status)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_running()) {
      set_is_running(from.is_running());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_position()) {
      mutable_position()->::roborts_decision::Point::MergeFrom(from.position());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Status::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:roborts_decision.Status)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Status::CopyFrom(const Status& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:roborts_decision.Status)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Status::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Status::Swap(Status* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Status::InternalSwap(Status* other) {
  std::swap(is_running_, other->is_running_);
  std::swap(status_, other->status_);
  std::swap(position_, other->position_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Status::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Status_descriptor_;
  metadata.reflection = Status_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Status

// required bool is_running = 1;
bool Status::has_is_running() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Status::set_has_is_running() {
  _has_bits_[0] |= 0x00000001u;
}
void Status::clear_has_is_running() {
  _has_bits_[0] &= ~0x00000001u;
}
void Status::clear_is_running() {
  is_running_ = false;
  clear_has_is_running();
}
 bool Status::is_running() const {
  // @@protoc_insertion_point(field_get:roborts_decision.Status.is_running)
  return is_running_;
}
 void Status::set_is_running(bool value) {
  set_has_is_running();
  is_running_ = value;
  // @@protoc_insertion_point(field_set:roborts_decision.Status.is_running)
}

// optional .roborts_decision.Status.RunStatus status = 2;
bool Status::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Status::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
void Status::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
void Status::clear_status() {
  status_ = 1;
  clear_has_status();
}
 ::roborts_decision::Status_RunStatus Status::status() const {
  // @@protoc_insertion_point(field_get:roborts_decision.Status.status)
  return static_cast< ::roborts_decision::Status_RunStatus >(status_);
}
 void Status::set_status(::roborts_decision::Status_RunStatus value) {
  assert(::roborts_decision::Status_RunStatus_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:roborts_decision.Status.status)
}

// optional .roborts_decision.Point position = 3;
bool Status::has_position() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Status::set_has_position() {
  _has_bits_[0] |= 0x00000004u;
}
void Status::clear_has_position() {
  _has_bits_[0] &= ~0x00000004u;
}
void Status::clear_position() {
  if (position_ != NULL) position_->::roborts_decision::Point::Clear();
  clear_has_position();
}
const ::roborts_decision::Point& Status::position() const {
  // @@protoc_insertion_point(field_get:roborts_decision.Status.position)
  return position_ != NULL ? *position_ : *default_instance_->position_;
}
::roborts_decision::Point* Status::mutable_position() {
  set_has_position();
  if (position_ == NULL) {
    position_ = new ::roborts_decision::Point;
  }
  // @@protoc_insertion_point(field_mutable:roborts_decision.Status.position)
  return position_;
}
::roborts_decision::Point* Status::release_position() {
  // @@protoc_insertion_point(field_release:roborts_decision.Status.position)
  clear_has_position();
  ::roborts_decision::Point* temp = position_;
  position_ = NULL;
  return temp;
}
void Status::set_allocated_position(::roborts_decision::Point* position) {
  delete position_;
  position_ = position;
  if (position) {
    set_has_position();
  } else {
    clear_has_position();
  }
  // @@protoc_insertion_point(field_set_allocated:roborts_decision.Status.position)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MutualInfo::kRobortInfoFieldNumber;
const int MutualInfo::kPunishFieldNumber;
const int MutualInfo::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MutualInfo::MutualInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:roborts_decision.MutualInfo)
}

void MutualInfo::InitAsDefaultInstance() {
  robort_info_ = const_cast< ::roborts_decision::RobotInfo*>(&::roborts_decision::RobotInfo::default_instance());
  punish_ = const_cast< ::roborts_decision::PunishInfo*>(&::roborts_decision::PunishInfo::default_instance());
  status_ = const_cast< ::roborts_decision::Status*>(&::roborts_decision::Status::default_instance());
}

MutualInfo::MutualInfo(const MutualInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:roborts_decision.MutualInfo)
}

void MutualInfo::SharedCtor() {
  _cached_size_ = 0;
  robort_info_ = NULL;
  punish_ = NULL;
  status_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MutualInfo::~MutualInfo() {
  // @@protoc_insertion_point(destructor:roborts_decision.MutualInfo)
  SharedDtor();
}

void MutualInfo::SharedDtor() {
  if (this != default_instance_) {
    delete robort_info_;
    delete punish_;
    delete status_;
  }
}

void MutualInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MutualInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MutualInfo_descriptor_;
}

const MutualInfo& MutualInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_decision_2eproto();
  return *default_instance_;
}

MutualInfo* MutualInfo::default_instance_ = NULL;

MutualInfo* MutualInfo::New(::google::protobuf::Arena* arena) const {
  MutualInfo* n = new MutualInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MutualInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:roborts_decision.MutualInfo)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_robort_info()) {
      if (robort_info_ != NULL) robort_info_->::roborts_decision::RobotInfo::Clear();
    }
    if (has_punish()) {
      if (punish_ != NULL) punish_->::roborts_decision::PunishInfo::Clear();
    }
    if (has_status()) {
      if (status_ != NULL) status_->::roborts_decision::Status::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MutualInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:roborts_decision.MutualInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .roborts_decision.RobotInfo robort_info = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_robort_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_punish;
        break;
      }

      // optional .roborts_decision.PunishInfo punish = 2;
      case 2: {
        if (tag == 18) {
         parse_punish:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_punish()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_status;
        break;
      }

      // optional .roborts_decision.Status status = 3;
      case 3: {
        if (tag == 26) {
         parse_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:roborts_decision.MutualInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:roborts_decision.MutualInfo)
  return false;
#undef DO_
}

void MutualInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:roborts_decision.MutualInfo)
  // optional .roborts_decision.RobotInfo robort_info = 1;
  if (has_robort_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->robort_info_, output);
  }

  // optional .roborts_decision.PunishInfo punish = 2;
  if (has_punish()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->punish_, output);
  }

  // optional .roborts_decision.Status status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->status_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:roborts_decision.MutualInfo)
}

::google::protobuf::uint8* MutualInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:roborts_decision.MutualInfo)
  // optional .roborts_decision.RobotInfo robort_info = 1;
  if (has_robort_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->robort_info_, false, target);
  }

  // optional .roborts_decision.PunishInfo punish = 2;
  if (has_punish()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->punish_, false, target);
  }

  // optional .roborts_decision.Status status = 3;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->status_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:roborts_decision.MutualInfo)
  return target;
}

int MutualInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:roborts_decision.MutualInfo)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional .roborts_decision.RobotInfo robort_info = 1;
    if (has_robort_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->robort_info_);
    }

    // optional .roborts_decision.PunishInfo punish = 2;
    if (has_punish()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->punish_);
    }

    // optional .roborts_decision.Status status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->status_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MutualInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:roborts_decision.MutualInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MutualInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MutualInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:roborts_decision.MutualInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:roborts_decision.MutualInfo)
    MergeFrom(*source);
  }
}

void MutualInfo::MergeFrom(const MutualInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:roborts_decision.MutualInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_robort_info()) {
      mutable_robort_info()->::roborts_decision::RobotInfo::MergeFrom(from.robort_info());
    }
    if (from.has_punish()) {
      mutable_punish()->::roborts_decision::PunishInfo::MergeFrom(from.punish());
    }
    if (from.has_status()) {
      mutable_status()->::roborts_decision::Status::MergeFrom(from.status());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MutualInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:roborts_decision.MutualInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MutualInfo::CopyFrom(const MutualInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:roborts_decision.MutualInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MutualInfo::IsInitialized() const {

  if (has_status()) {
    if (!this->status_->IsInitialized()) return false;
  }
  return true;
}

void MutualInfo::Swap(MutualInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MutualInfo::InternalSwap(MutualInfo* other) {
  std::swap(robort_info_, other->robort_info_);
  std::swap(punish_, other->punish_);
  std::swap(status_, other->status_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MutualInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MutualInfo_descriptor_;
  metadata.reflection = MutualInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MutualInfo

// optional .roborts_decision.RobotInfo robort_info = 1;
bool MutualInfo::has_robort_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MutualInfo::set_has_robort_info() {
  _has_bits_[0] |= 0x00000001u;
}
void MutualInfo::clear_has_robort_info() {
  _has_bits_[0] &= ~0x00000001u;
}
void MutualInfo::clear_robort_info() {
  if (robort_info_ != NULL) robort_info_->::roborts_decision::RobotInfo::Clear();
  clear_has_robort_info();
}
const ::roborts_decision::RobotInfo& MutualInfo::robort_info() const {
  // @@protoc_insertion_point(field_get:roborts_decision.MutualInfo.robort_info)
  return robort_info_ != NULL ? *robort_info_ : *default_instance_->robort_info_;
}
::roborts_decision::RobotInfo* MutualInfo::mutable_robort_info() {
  set_has_robort_info();
  if (robort_info_ == NULL) {
    robort_info_ = new ::roborts_decision::RobotInfo;
  }
  // @@protoc_insertion_point(field_mutable:roborts_decision.MutualInfo.robort_info)
  return robort_info_;
}
::roborts_decision::RobotInfo* MutualInfo::release_robort_info() {
  // @@protoc_insertion_point(field_release:roborts_decision.MutualInfo.robort_info)
  clear_has_robort_info();
  ::roborts_decision::RobotInfo* temp = robort_info_;
  robort_info_ = NULL;
  return temp;
}
void MutualInfo::set_allocated_robort_info(::roborts_decision::RobotInfo* robort_info) {
  delete robort_info_;
  robort_info_ = robort_info;
  if (robort_info) {
    set_has_robort_info();
  } else {
    clear_has_robort_info();
  }
  // @@protoc_insertion_point(field_set_allocated:roborts_decision.MutualInfo.robort_info)
}

// optional .roborts_decision.PunishInfo punish = 2;
bool MutualInfo::has_punish() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MutualInfo::set_has_punish() {
  _has_bits_[0] |= 0x00000002u;
}
void MutualInfo::clear_has_punish() {
  _has_bits_[0] &= ~0x00000002u;
}
void MutualInfo::clear_punish() {
  if (punish_ != NULL) punish_->::roborts_decision::PunishInfo::Clear();
  clear_has_punish();
}
const ::roborts_decision::PunishInfo& MutualInfo::punish() const {
  // @@protoc_insertion_point(field_get:roborts_decision.MutualInfo.punish)
  return punish_ != NULL ? *punish_ : *default_instance_->punish_;
}
::roborts_decision::PunishInfo* MutualInfo::mutable_punish() {
  set_has_punish();
  if (punish_ == NULL) {
    punish_ = new ::roborts_decision::PunishInfo;
  }
  // @@protoc_insertion_point(field_mutable:roborts_decision.MutualInfo.punish)
  return punish_;
}
::roborts_decision::PunishInfo* MutualInfo::release_punish() {
  // @@protoc_insertion_point(field_release:roborts_decision.MutualInfo.punish)
  clear_has_punish();
  ::roborts_decision::PunishInfo* temp = punish_;
  punish_ = NULL;
  return temp;
}
void MutualInfo::set_allocated_punish(::roborts_decision::PunishInfo* punish) {
  delete punish_;
  punish_ = punish;
  if (punish) {
    set_has_punish();
  } else {
    clear_has_punish();
  }
  // @@protoc_insertion_point(field_set_allocated:roborts_decision.MutualInfo.punish)
}

// optional .roborts_decision.Status status = 3;
bool MutualInfo::has_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void MutualInfo::set_has_status() {
  _has_bits_[0] |= 0x00000004u;
}
void MutualInfo::clear_has_status() {
  _has_bits_[0] &= ~0x00000004u;
}
void MutualInfo::clear_status() {
  if (status_ != NULL) status_->::roborts_decision::Status::Clear();
  clear_has_status();
}
const ::roborts_decision::Status& MutualInfo::status() const {
  // @@protoc_insertion_point(field_get:roborts_decision.MutualInfo.status)
  return status_ != NULL ? *status_ : *default_instance_->status_;
}
::roborts_decision::Status* MutualInfo::mutable_status() {
  set_has_status();
  if (status_ == NULL) {
    status_ = new ::roborts_decision::Status;
  }
  // @@protoc_insertion_point(field_mutable:roborts_decision.MutualInfo.status)
  return status_;
}
::roborts_decision::Status* MutualInfo::release_status() {
  // @@protoc_insertion_point(field_release:roborts_decision.MutualInfo.status)
  clear_has_status();
  ::roborts_decision::Status* temp = status_;
  status_ = NULL;
  return temp;
}
void MutualInfo::set_allocated_status(::roborts_decision::Status* status) {
  delete status_;
  status_ = status;
  if (status) {
    set_has_status();
  } else {
    clear_has_status();
  }
  // @@protoc_insertion_point(field_set_allocated:roborts_decision.MutualInfo.status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace roborts_decision

// @@protoc_insertion_point(global_scope)
